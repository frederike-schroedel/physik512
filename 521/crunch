#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import itertools
import json
import os.path
import pprint
import re
import sys
import subprocess

import matplotlib.pyplot as pl
import matplotlib.colors
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import scipy.integrate
import scipy.interpolate
import unitprint

_livetime_pattern = re.compile(r'LIVETIME: (\d+\.?\d*)')

'''
Farbtabelle
'''

# '#e41a1c'
# '#377eb9'
# '#4daf4a'
# '#984ea4'
# '#ff7f01'

def lorentz_peak(x, mean, width, area, offset):
    return area / np.pi * width/2 / ((x - mean)**2 + (width/2)**2) + offset

def lorentz_peak_2(x, mean, width, area):
    return area / np.pi * width/2 / ((x - mean)**2 + (width/2)**2)

def gauss_peak(x, mean, width, area):
    return area / (width * np.sqrt(2 * np.pi)) * np.exp( - ((x - mean) / width)**2 / 2)

def linear(x, slope, offset):
    return x * slope + offset

def linear_err(x, x_err, slope_val, slope_err, offset_val, offset_err):
    return np.sqrt((x_err * slope_val)**2 + (x * slope_err)**2 + offset_err**2)

def power(x, a, b, c):
    return a * x**b + c

def extract_livetime(metafile):# {{{
    with open(metafile) as f:
        for line in f:
            m = _livetime_pattern.search(line)
            if m:
                return float(m.group(1))# }}}

def load_data_normalized(basename):# {{{
    '''
    Loads the data and normalizes it to give events per second.
    '''
    datafile = 'Daten/' + basename + '.txt'
    metafile = 'Daten/' + basename + '.mcd'

    livetime = extract_livetime(metafile)

    data = np.loadtxt(datafile)

    data[:, 1] /= livetime

    return data# }}}

def plot_pair(basename, underground_basename):# {{{
    data = load_data_normalized(basename)
    underground = load_data_normalized(underground_basename)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(data[:, 0], data[:, 1], marker=None, label='Probe')
    ax.plot(underground[:, 0], underground[:, 1], marker=None, label='Untergrund')
    ax.margins(0.05)
    ax.set_xlabel('')
    ax.set_ylabel('')
    fig.tight_layout()
    fig.savefig('_build/' + basename + '.pdf')# }}}

def calibrate_sz(T):
    underground = load_data_normalized('Sz_Untergrund')
    co = load_data_normalized('Sz_CO')
    cs = load_data_normalized('Sz_CS')
    eu = load_data_normalized('Sz_EU')

    # Subtract underground from measurements.
    co[:, 1] -= underground[:, 1]
    cs[:, 1] -= underground[:, 1]
    eu[:, 1] -= underground[:, 1]

    # Kanalbereich und bekannte Energie
    fit_range_cs = [
        (3031, 4007, 661.66),
    ]

    fit_range_eu = [
        (625, 775, 121.7825),
        (1700, 2075, 344.281),
    ]

    fit_range_co = [
        (5750, 6460, 1173.237),
        (6510, 7400, 1332.501),
    ]

    # Listen über alle Elemente# {{{
    list_mean_val = np.array([])
    list_mean_err = np.array([])
    list_width_val = np.array([])
    list_width_err = np.array([])
    list_area_val = np.array([])
    list_area_err = np.array([])
    list_offset_val = np.array([])
    list_offset_err = np.array([])
    list_expected_energy = np.array([])# }}}


    # Fitte Lorentzkurve an Hauptpeaks an# {{{
    for name, data, fit_ranges in [('EU', eu, fit_range_eu), ('CS', cs, fit_range_cs), ('CO', co, fit_range_co)]:

        #data_cutted = np.copy(data)
        #for i, (first, last, expected_energy) in zip(itertools.count(1), fit_ranges):
        #    data_cutted[first:last, 1] = 0

        #events_smooth = scipy.ndimage.filters.gaussian_filter(data_cutted[:, 1], 200)
        #events = data[:, 1] - events_smooth

        fig = pl.figure()

        #ax = fig.add_subplot(1, 1, 1)
        #ax.plot(data[:, 0], data[:, 1])
        #ax.plot(data[:, 0], events_smooth)
        ##ax.plot(energy, events)
        ##ax.set_yscale('log')
        #fig.savefig('_build/Sz_smooth_' + name + '.pdf')
        #fig.clear()

        #ax = fig.add_subplot(1, 1, 1)
        #ax.plot(data[:, 0], events)
        ##ax.plot(energy, events)
        ##ax.set_yscale('log')
        #fig.savefig('_build/Sz_smoothed_' + name + '.pdf')
        #fig.clear()

        #data[:, 1] = events


        for i, (first, last, expected_energy) in zip(itertools.count(1), fit_ranges):
            x, y = data[first:last, 0], data[first:last, 1]
            popt, pconv = op.curve_fit(gauss_peak, x, y, p0=[np.mean(x), 100, 300])
            fit_x = np.linspace(np.min(x), np.max(x), 1000)
            fit_y = gauss_peak(fit_x, *popt)

            ax = fig.add_subplot(1, len(fit_ranges), i)
            ax.plot(x, y, marker=None)
            ax.plot(fit_x, fit_y, marker=None)
            ax.margins(0.05)
            for label in ax.get_xticklabels():
                #label.set_fontsize(9)
                label.set_rotation(45)

            perr = np.sqrt(pconv.diagonal())

            parameters = list(zip(popt, perr))
            #print(parameters)

            mean_val, mean_err = parameters[0]
            width_val, width_err = parameters[1]
            area_val, area_err = parameters[2]
            #offset_val, offset_err = parameters[3]

            #print(name, i, 'Integral\t', scipy.integrate.simps(gauss_peak(data[:, 0], *popt), data[:, 0]))
            #print(name, i, 'area\t', area_val, '+-', area_err)
            #print(name, i, 'Daten\t', scipy.integrate.simps(y, x))
            #print()

            list_mean_val = np.append(list_mean_val, mean_val)
            list_mean_err = np.append(list_mean_err, mean_err)
            list_width_val = np.append(list_width_val, width_val * 2)
            list_width_err = np.append(list_width_err, width_err * 2)
            list_area_val = np.append(list_area_val, area_val)
            list_area_err = np.append(list_area_err, area_err)
            #list_offset_val = np.append(list_offset_val, offset_val)
            #list_offset_err = np.append(list_offset_err, offset_err)
            list_expected_energy = np.append(list_expected_energy, expected_energy)

        fig.tight_layout()
        fig.savefig('_build/Sz-'+name+'-peaks.pdf')
        fig.clear()


        #Peak to Total für CS und CO# {{{
        peak_to_total = 0
        peak_to_total_err = 0
        #TODO Rückstreupeak beachten
        if name == 'CS':
            total_val = scipy.integrate.simps(data[:, 1], data[:, 0])
            peak_val = list_area_val[-1]
            peak_err = list_area_err[-1]

            #return_area = scipy.integrate.simps(data[900:1200, 1], data[900:1200, 0])

            peak_to_total = peak_val / total_val
            peak_to_total_err = peak_err / total_val

            T['sz_cs_ptt'] = unitprint.siunitx(peak_to_total, peak_to_total_err)

            abs_val = 0.944 * 25e-6 * 3.7e10 * np.exp(-(np.log(2)/30.17) * (2015 + 11/12 - 1985 - 4/12)) * 24**2 /(4 *250**2) # * 600
            abs_err = 0.944 * 25e-6 * 3.7e10 * np.exp(-(np.log(2)/30.17) * (2015 + 11/12 - 1985 - 4/12)) * 24**2 /(4 *250**3) * 50 # *600

            peak_to_abs = peak_val / abs_val
            peak_to_abs_err = np.sqrt((peak_err / abs_val)**2 + (peak_val * abs_err /(abs_val**2))**2)

            T['sz_cs_abs'] = unitprint.siunitx(peak_to_abs, peak_to_abs_err)
            T['cs_activity'] = unitprint.siunitx(25e-6 * 3.7e10 * np.exp(-(np.log(2)/30.17) * (2015 + 11/12 - 1985 - 4/12)))

        elif name == 'CO':
            total_val = scipy.integrate.simps(data[:, 1], data[:, 0])
            peak_val = list_area_val[-1] + list_area_val[-2]
            peak_err = np.sqrt((list_area_err[-1] * list_area_val[-2])**2 + (list_area_val[-1] + list_area_err[-2])**2)

            #return_area = scipy.integrate.simps(data[900:1200, 1], data[900:1200, 0])

            peak_to_total = peak_val / total_val
            peak_to_total_err = peak_err / total_val

            T['sz_co_ptt'] = unitprint.siunitx(peak_to_total, peak_to_total_err)

        #print('Peak-to-Total', name, ':', peak_to_total, ' +- ', peak_to_total_err)# }}}# }}}

    # Erstellen der Energieeichung# {{{
    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    x = list_mean_val
    y = list_expected_energy
    popt, pconv = op.curve_fit(linear, x, y)
    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)
    ax.plot(fit_x, fit_y)
    ax.errorbar(list_mean_val, list_expected_energy, xerr=list_mean_err, marker='+', linestyle='none')
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Energie / keV')
    ax.margins(0.05)
    ax.grid(True)
    perr = np.sqrt(pconv.diagonal())
    parameters = list(zip(popt, perr))
    slope_val, slope_err = parameters[0]
    offset_val, offset_err = parameters[1]
    fig.tight_layout()
    fig.savefig('_build/sz_channels.pdf')
    T['sz_slope'] = unitprint.siunitx(slope_val, slope_err)
    T['sz_offset'] = unitprint.siunitx(offset_val, offset_err)# }}}


    # Halbwertsbreiten der Peaks# {{{
    list_intensity_val = list_area_val * list_mean_val
    list_intensity_err = np.sqrt(
        (list_area_err * list_mean_val)**2
        + (list_area_val * list_mean_err)**2
    )

    rescale = list_intensity_val[-1] / 1000

    list_intensity_val /= rescale
    list_intensity_err /= rescale

    fit_data = list(zip(
        [str(i) for i in range(1, len(list_mean_val) +1)],
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_width_val, list_width_err),
        unitprint.siunitx(list_area_val, list_area_err),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        unitprint.siunitx(list_expected_energy),
    ))

    T['sz_fits_table'] = fit_data# }}}


def calibrate_ge(T):
    underground = load_data_normalized('Ge_Untergrund')
    co = load_data_normalized('Ge_CO')
    cs = load_data_normalized('Ge_CS')
    eu = load_data_normalized('Ge_EU')

    # Subtract underground from measurements.
    co[:, 1] -= underground[:, 1]
    cs[:, 1] -= underground[:, 1]
    eu[:, 1] -= underground[:, 1]


    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(eu[:, 0], eu[:, 1], marker=None)
    ax.margins(0.05)
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Ereignisse')
    fig.tight_layout()
    fig.savefig('_build/Ge_calib.pdf')
    fig.clear()

    # Kanalbereich und bekannte Energien# {{{

    fit_range_co = [
            (6550, 6650, 1173.237),
            (7450, 7550, 1332.501),
    ]

    fit_range_cs = [
            (3650, 3800, 661.66),
    ]

    fit_range_eu = [
        (625, 716, 121.7825),
        (1318, 1407, 244.6989),
        (1878, 1971, 344.281),
        (4333, 4423, 778.903),
        (5380, 5466, 964.131),
        (6212, 6295, 1112.116),
        (7883, 7970, 1408.011),
    ]# }}}

    fig = pl.figure()

    list_mean_val = np.array([])# {{{
    list_mean_err = np.array([])
    list_width_val = np.array([])
    list_width_err = np.array([])
    list_area_val = np.array([])
    list_area_err = np.array([])
    list_offset_val = np.array([])
    list_offset_err = np.array([])
    list_expected_energy = np.array([])# }}}


    count = 0# {{{
    for name, data, fit_ranges in [('EU', eu, fit_range_eu), ('CS', cs, fit_range_cs), ('CO', co, fit_range_co)]:
        for i, (first, last, expected_energy) in zip(itertools.count(1), fit_ranges):
            x, y = data[first:last, 0], data[first:last, 1]
            popt, pconv = op.curve_fit(lorentz_peak, x, y, p0=[np.mean(x), 10, 100, 0])
            fit_x = np.linspace(np.min(x), np.max(x), 1000)
            fit_y = lorentz_peak(fit_x, *popt)

            ax = fig.add_subplot(3, (len(fit_ranges) + 2)//3, i)
            ax.plot(x, y, marker=None)
            ax.plot(fit_x, fit_y, marker=None)
            ax.margins(0.05)
            for label in ax.get_xticklabels():
                #label.set_fontsize(9)
                label.set_rotation(45)

            perr = np.sqrt(pconv.diagonal())

            parameters = list(zip(popt, perr))

            mean_val, mean_err = parameters[0]
            width_val, width_err = parameters[1]
            area_val, area_err = parameters[2]
            offset_val, offset_err = parameters[3]

            #print(name, i, 'Integral\t', scipy.integrate.simps(lorentz_peak(data[:, 0], *popt), data[:, 0]))
            #print(name, i, 'area\t', area_val, '+-', area_err)
            #print(name, i, 'Daten\t', scipy.integrate.simps(y, x))
            #print()

            list_mean_val = np.append(list_mean_val, mean_val)
            list_mean_err = np.append(list_mean_err, mean_err)
            list_width_val = np.append(list_width_val, width_val)
            list_width_err = np.append(list_width_err, width_err)
            list_area_val = np.append(list_area_val, area_val)
            list_area_err = np.append(list_area_err, area_err)
            list_offset_val = np.append(list_offset_val, offset_val)
            list_offset_err = np.append(list_offset_err, offset_err)
            list_expected_energy = np.append(list_expected_energy, expected_energy)

            count += 1

        if name == 'EU':
            first_eu = 0
            last_eu = count

            fig.tight_layout()
            fig.savefig('_build/Ge_calib-peaks.pdf')
            fig.clear()

        elif name == 'CS':
            first_cs = last_eu + 1
            last_cs = count

            total_val = scipy.integrate.simps(data[:, 1], data[:, 0])
            peak_val = list_area_val[-1]
            peak_err = list_area_err[-1]

            #return_area = scipy.integrate.simps(data[900:1200, 1], data[900:1200, 0])

            peak_to_total = peak_val / total_val
            peak_to_total_err = peak_err / total_val

            T['ge_cs_ptt'] = unitprint.siunitx(peak_to_total, peak_to_total_err)

            abs_val = 0.944 * 25e-6 * 3.7e10 * np.exp(-(np.log(2)/30.17) * (2015 + 11/12 - 1985 - 4/12)) * 27.85**2 /(4 *250**2) # * 600
            abs_err = 0.944 * 25e-6 * 3.7e10 * np.exp(-(np.log(2)/30.17) * (2015 + 11/12 - 1985 - 4/12)) * 27.85**2 /(4 *250**3) * 50 # *600

            peak_to_abs = peak_val / abs_val
            peak_to_abs_err = np.sqrt((peak_err / abs_val)**2 + (peak_val * abs_err /(abs_val**2))**2)

            T['ge_cs_abs'] = unitprint.siunitx(peak_to_abs, peak_to_abs_err)

            fig.clear()

        elif name == 'CO':
            first_co = last_cs + 1
            last_co = count

            total_val = scipy.integrate.simps(data[:, 1], data[:, 0])
            peak_val = list_area_val[-1] + list_area_val[-2]
            peak_err = np.sqrt((list_area_err[-1] * list_area_val[-2])**2 + (list_area_val[-1] + list_area_err[-2])**2)

            #return_area = scipy.integrate.simps(data[900:1200, 1], data[900:1200, 0])

            peak_to_total = peak_val / total_val
            peak_to_total_err = peak_err / total_val

            T['ge_co_ptt'] = unitprint.siunitx(peak_to_total, peak_to_total_err)

            fig.clear()# }}}

    #print(len(list_area_val))
    #print(first_eu, last_eu, first_cs, last_cs, first_co, last_co)

    # Halbwertsbreiten der Peaks# {{{

    list_intensity_val = list_area_val #* list_mean_val
    list_intensity_err = list_area_err
    #list_intensity_err = np.sqrt(
    #    (list_area_err * list_mean_val)**2
    #    + (list_area_val * list_mean_err)**2
    #)# }}}

    # Scaliere auf den letzten Eu Peak# {{{

    rescale = list_intensity_val[last_eu - 1] / 1000

    list_intensity_val /= rescale
    list_intensity_err /= rescale

    fit_data = list(zip(
        [str(i) for i in range(1, len(list_mean_val) +1)],
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_width_val, list_width_err),
        unitprint.siunitx(list_area_val, list_area_err),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        unitprint.siunitx(list_expected_energy),
    ))

    T['ge_eu_fits_table'] = fit_data[first_eu:last_eu]
    T['ge_cs_fits_table'] = fit_data[first_cs - 1:last_cs]
    T['ge_co_fits_table'] = fit_data[first_co - 1:last_co]# }}}


    # Eu Intensitäten# {{{

    expected_rel_intensity = np.array([
        1362.0,
        359.0,
        1275.0,
        621.6,
        693.4,
        689.0,
        1000.0,
    ])


    efficiency_val = list_intensity_val[first_eu:last_eu] / expected_rel_intensity
    efficiency_err = list_intensity_err[first_eu:last_eu] / expected_rel_intensity# }}}

    x = list_expected_energy[first_eu:last_eu]

    popt, pconv = op.curve_fit(power, x[1:], efficiency_val[1:], sigma=efficiency_err[1:], p0=[1e5, -2, 1])
    fit_x = np.linspace(190, max(x), 1000)
    fit_y = power(fit_x, *popt)

    perr = np.sqrt(pconv.diagonal())

    a = popt[0]
    b = popt[1]
    c = popt[2]

    def power_calibration(x):
        return power(x, a, b, c)

    T['ge_effizienz_a'] = unitprint.siunitx(popt[0], perr[0])
    T['ge_effizienz_b'] = unitprint.siunitx(popt[1], perr[1])
    T['ge_effizienz_c'] = unitprint.siunitx(popt[2], perr[2])

    # Detektoreffizienz mit Eu Spektrum# {{{

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.errorbar(list_expected_energy[first_eu:last_eu], efficiency_val, efficiency_err, marker='+', linestyle='none')
    ax.plot(fit_x, fit_y)
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Effizienz')
    ax.margins(0.05)
    ax.grid(True)
    fig.tight_layout()
    fig.savefig('_build/ge_efficiency.pdf')

    T['ge_efficiency_table'] = list(zip(
        unitprint.siunitx(list_expected_energy),
        unitprint.siunitx(expected_rel_intensity),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        unitprint.siunitx(efficiency_val, efficiency_err),
    ))# }}}

    # Plot zur Energiekalibrierung# {{{

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    x = list_mean_val
    y = list_expected_energy
    popt, pconv = op.curve_fit(linear, x, y)
    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)
    ax.plot(fit_x, fit_y)
    ax.errorbar(list_mean_val, list_expected_energy, xerr=list_mean_err, marker='+', linestyle='none')
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Energie / keV')
    ax.margins(0.05)
    ax.grid(True)
    perr = np.sqrt(pconv.diagonal())
    parameters = list(zip(popt, perr))
    slope_val, slope_err = parameters[0]
    offset_val, offset_err = parameters[1]
    fig.tight_layout()
    fig.savefig('_build/ge_channels.pdf')
    T['ge_slope'] = unitprint.siunitx(slope_val, slope_err)
    T['ge_offset'] = unitprint.siunitx(offset_val, offset_err)# }}}

    def calibration(x):
        return linear(x, slope_val, offset_val)

    def inv_calibration(x):
        return (x - offset_val) / slope_val


    # Breiten gegen Energie mit Eu Spektrum# {{{

    x = linear(list_mean_val[first_eu:last_eu], slope_val, offset_val)
    y = (list_width_val[first_eu:last_eu] * slope_val)**2
    # TODO Fehlerfortpflanzung für `x` und `y` wenn noch Zeit ist.
    x_err = linear_err(list_mean_val[first_eu:last_eu], list_mean_err[first_eu:last_eu], slope_val, slope_err, offset_val, offset_err)
    y_err = 2 * (list_width_val[first_eu:last_eu] * slope_val) * np.sqrt((list_width_val[first_eu:last_eu] * slope_err)**2 + (list_width_err[first_eu:last_eu] * slope_val)**2)
    popt, pconv = op.curve_fit(linear, x, y)
    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)
    perr = np.sqrt(pconv.diagonal())
    parameters = list(zip(popt, perr))
    const_sq_val, const_sq_err = parameters[0]
    electronic_width_sq_val, electronic_width_sq_err = parameters[1]

    const_val = np.sqrt(const_sq_val)
    const_err = const_sq_err / (2 * const_val)

    electronic_width_val = np.sqrt(electronic_width_sq_val)
    electronic_width_err = electronic_width_sq_err / (2 * electronic_width_val)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.errorbar(x, y, xerr=x_err, yerr=y_err, marker='+', linestyle='none')
    ax.set_ylabel('$\Gamma^2 / \mathrm{keV}^2$')
    ax.set_xlabel('$E_\gamma$ / keV')
    ax.plot(fit_x, fit_y)
    fig.tight_layout()
    fig.savefig('_build/halbwertsbreite_ge.pdf')

    T['ge_const'] = unitprint.siunitx(const_val, const_err)
    T['ge_electronic_width'] = unitprint.siunitx(electronic_width_val, electronic_width_err)# }}}

    # Langzeitmessung

    langzeit_daten = load_data_normalized('Langzeit_Probe')
    langzeit_untergrund = load_data_normalized('Langzeit_Untergrund')

    events = langzeit_daten[:, 1] - langzeit_untergrund[:, 1]
    channel = langzeit_daten[:, 0]
    energy = linear(channel, slope_val, offset_val)

    #print(np.max(langzeit_daten[:, 1]))
    #print(np.max(langzeit_untergrund[:, 1]))

    #print(np.max(events))

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(energy, langzeit_daten[:, 1])
    ax.plot(energy, langzeit_untergrund[:, 1])
    ax.set_yscale('log')
    fig.savefig('_build/langzeit.pdf')

    events_smooth = scipy.ndimage.filters.gaussian_filter(langzeit_daten[:, 1], 200)
    events = langzeit_daten[:, 1] - events_smooth

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(energy, langzeit_daten[:, 1])
    ax.plot(energy, events_smooth)
    #ax.plot(energy, events)
    ax.set_yscale('log')
    fig.savefig('_build/langzeit2.pdf')

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(energy[energy > 50], events[energy > 50])
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Ereignisse')
    ax.margins(0.05)
    ax.grid(True)
    fig.tight_layout()
    fig.savefig('_build/langzeit3.pdf')

    np.savetxt('_build/langzeit.tsv', np.column_stack([energy, events]))
    np.savetxt('_build/langzeit-orig.tsv', np.column_stack([energy, langzeit_daten[:, 1]]))


    # Langzeitmessung nochmal in schön
    ##################################

    show=False

    data = load_data_normalized('Langzeit_Probe')
    untergrund = load_data_normalized('Langzeit_Untergrund')

    # Daten durch Energieeichung ziehen

    data[:, 0] = calibration(data[:, 0])
    untergrund[:, 0] = calibration(untergrund[:, 0])

    # Glätten der Kurve
    data[:, 1] = data[:, 1] / power_calibration(data[:, 0])
    untergrund[:, 1] = untergrund[:, 1] / power_calibration(untergrund[:, 0])

    lower_end = inv_calibration(50)

    # Vergleich Probe zu Untergrund
    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    fit_x, fit_y = untergrund[lower_end:, 0], untergrund[lower_end:, 1]
    ax.plot(fit_x, fit_y, marker = None, alpha=0.6, color='#377eb9', label='Untergrund')

    x, y = data[lower_end:, 0], data[lower_end:, 1]
    ax.plot(x, y, marker=None, alpha=0.6, color='#e41a1c', label='Daten')


   #     for i, (first, last, expected_energy) in zip(itertools.count(1), fit_range):
   #         points.append(fit_peak(name, data, first, last, expected_energy, save=True, side=side, num=i))
   #         tmp_point = np.array(points[-1])

   #         fit_x = np.linspace(np.min(x), np.max(x), 1000)
   #         fit_y = gauss_peak(fit_x, tmp_point[-7], tmp_point[-5], tmp_point[-3])

   #         ax.plot(fit_x, fit_y, marker = None, alpha=0.6, color='#e41a1c', linewidth=2)


    #ax.set_ylim(-0.0001, 0.0051)
    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Ereignisse / s')
    ax.legend(loc='best')
    fig.tight_layout()
    fig.savefig('_build/plot_spektren_langzeit.pdf')

    if show:
        fig.show()
        print('Waiting for input to continue ...')
        input()
    fig.clear
    pl.close()

    # Extrahiere Peaks

    fit_range = [
            (237, 241),
            (241, 243),
            (294, 297),
            (337, 340),
            (350, 354),
            (459, 467),
            (509, 513),
            (582, 585),
            (608, 612),
            (660, 664),
            (727, 728),
            (767, 770),
            (791, 799),
            (859, 863),
            (910, 913),
            (963, 967),
            (967, 972),
            (1118, 1123),
            (1236, 1241),
            (1375, 1380),
            ]

    fit_names =[
            r'$^{212}\text{Pb}$',
            r'$^{214}\text{Pb}$',
            r'$^{214}\text{Pb}$',
            r'$^{228}\text{Ac}$',
            r'$^{214}\text{Pb}$',
            r'$^{228}\text{Ac}$',
            'Positron',
            r'$^{208}\text{Ti}$',
            r'$^{214}\text{Bi}$',
            r'$^{137}\text{Cs}$',
            r'$^{212}\text{Bi}$',
            r'$^{214}\text{Bi}$',
            r'$^{228}\text{Ac}$',
            r'$^{208}\text{Ti}$',
            r'$^{228}\text{Ac}$',
            r'$^{228}\text{Ac}$',
            r'$^{228}\text{Ac}$',
            r'$^{214}\text{Bi}$',
            r'$^{214}\text{Bi}$',
            r'$^{214}\text{Bi}$',
            ]

    fit_range = inv_calibration(fit_range)

    points = []

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    x, y = data[lower_end:, 0], data[lower_end:, 1]
    ax.plot(x, y, marker=None, alpha=0.6, color='#377eb9')


    for i, (first, last) in zip(itertools.count(1), fit_range):
        points.append(fit_peak(T, 'langzeit', data, first, last, save=True, num=i))
        tmp_point = np.array(points[-1])

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = lorentz_peak_2(fit_x, tmp_point[-7], tmp_point[-5], tmp_point[-3])

        ax.plot(fit_x, fit_y, marker = None, alpha=0.6, color='#e41a1c', linewidth=1)

    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Ereignisse / s')
    fig.tight_layout()
    fig.savefig('_build/plot_peaks_langzeit.pdf')

    if show:
        fig.show()
        print('Waiting for input to continue ...')
        input()
    fig.clear
    pl.close()

    # Speichern der Parameter # {{{
    points = np.array(points)

    list_mean_val = points[:, 0]
    list_mean_err = points[:, 1]
    list_full_width_val = points[:, 2]
    list_full_width_err = points[:, 3]
    list_area_val = points[:, 4]
    list_area_err = points[:, 5]
    #list_offset_val = points[:, 6]
    #list_offset_err = points[:, 7]
    list_expected_energy = points[:, 6]

    T['langzeit_calibration_table'] = list(zip(
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_full_width_val, list_full_width_err),
        unitprint.siunitx(list_area_val * 1e4, list_area_err * 1e4),
        fit_names,
        ))# }}}


    np.savetxt('_build/langzeit.tsv', data)


def fit_peak(T, name, data, first, last, energy=0, show=False, save=False, side='', num=0):# {{{
    '''
    Passt einen Peak an
    :show zeigt die einzelne Anpassung
    :save speichert gesamtes Spektrum in Datei

    :return Mittelpunkt, Fehler Mittelpunkt, Breite, Fehler Breite, Fläche, Fehler Fläche, Energie
    '''

    x, y = data[first:last, 0], data[first:last, 1]
    popt, pconv = op.curve_fit(lorentz_peak_2, x, y, p0=[np.mean(x), 2, 5])
    perr = np.sqrt(pconv.diagonal())

    if show:
        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = lorentz_peak_2(fit_x, *popt)

        ax.plot(x, y, marker=None, label=name)
        ax.plot(fit_x, fit_y, marker=None)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        ax.legend(loc='best')
        fig.tight_layout()
        fig.show()
        print('Waiting for input ...')
        input()
        fig.clear()
        pl.close()

    # Erzeuge Platz im Template für alle Energien.
    if not 'plot_fit_peaks' in T:
        T['plot_fit_peaks'] = []

    if save:
        fig = pl.figure(figsize=(7, 4))
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[first:last, 0], data[first:last, 1]

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = lorentz_peak_2(fit_x, *popt)

        ax.plot(x, y, marker=None, alpha=0.6, color='#377eb8')
        ax.plot(fit_x, fit_y, marker=None, alpha=0.6, color='#e41a1c', linewidth=2)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Energie / keV')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_fit_peak_'+ side + '_' + '{}'.format(num) + '_' + name +'.pdf')
        T['plot_fit_peaks'].append((num, '{:04d}'.format(int(first)), '{:04d}'.format(int(last)), unitprint.siunitx(popt[0], perr[0])))
        fig.clear
        pl.close()

    return popt[0], perr[0], popt[1], perr[1], popt[2], perr[2], energy# }}}

def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)

def main():
    T = {}

    ###########################################

    calibrate_sz(T)
    calibrate_ge(T)
    plot_pair('Ge_CO', 'Ge_Untergrund')
    plot_pair('Ge_CS', 'Ge_Untergrund')
    plot_pair('Ge_EU', 'Ge_Untergrund')

    plot_pair('Sz_CO', 'Sz_Untergrund')
    plot_pair('Sz_CS', 'Sz_Untergrund')
    plot_pair('Sz_EU', 'Sz_Untergrund')

    ###########################################

    subprocess.check_call(['./element_match', '--num', '15'])
    subprocess.check_call(['./element_match', '--num', '15', '--score'])

    ###########################################


    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
