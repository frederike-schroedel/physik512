#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import itertools
import json
import os.path
import pprint
import re
import sys
import subprocess

import matplotlib.pyplot as pl
import matplotlib.colors
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import scipy.integrate
import scipy.interpolate
import unitprint

_livetime_pattern = re.compile(r'LIVETIME: (\d+\.?\d*)')

def lorentz_peak(x, mean, width, area, offset):
    return area / np.pi * width/2 / ((x - mean)**2 + (width/2)**2) + offset

def gauss_peak(x, mean, width, area):
    return area / (width * np.sqrt(2 * np.pi)) * np.exp( - ((x - mean) / width)**2 / 2)

def linear(x, slope, offset):
    return x * slope + offset

def linear_err(x, x_err, slope_val, slope_err, offset_val, offset_err):
    return np.sqrt((x_err * slope_val)**2 + (x * slope_err)**2 + offset_err**2)

def extract_livetime(metafile):
    with open(metafile) as f:
        for line in f:
            m = _livetime_pattern.search(line)
            if m:
                return float(m.group(1))

def load_data_normalized(basename):
    '''
    Loads the data and normalizes it to give events per second.
    '''
    datafile = 'Daten/' + basename + '.txt'
    metafile = 'Daten/' + basename + '.mcd'

    livetime = extract_livetime(metafile)

    data = np.loadtxt(datafile)

    data[:, 1] /= livetime

    return data

def plot_pair(basename, underground_basename):
    data = load_data_normalized(basename)
    underground = load_data_normalized(underground_basename)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(data[:, 0], data[:, 1], marker=None, label='Probe')
    ax.plot(underground[:, 0], underground[:, 1], marker=None, label='Untergrund')
    ax.margins(0.05)
    ax.set_xlabel('')
    ax.set_ylabel('')
    fig.tight_layout()
    fig.savefig('_build/' + basename + '.pdf')

def calibrate_sz(T):
    underground = load_data_normalized('Sz_Untergrund')
    co = load_data_normalized('Sz_CO')
    cs = load_data_normalized('Sz_CS')
    eu = load_data_normalized('Sz_EU')

    # Subtract underground from measurements.
    co[:, 1] -= underground[:, 1]
    cs[:, 1] -= underground[:, 1]
    eu[:, 1] -= underground[:, 1]

    # Kanalbereich und bekannte Energie
    fit_range_cs = [
        (3031, 4007, 661.66),
    ]

    fit_range_eu = [
        (625, 775, 121.7825),
        (1700, 2075, 344.281),
    ]

    fit_range_co = [
        (5750, 6460, 1173.237),
        (6510, 7400, 1332.501),
    ]

    # Listen über alle Elemente
    list_mean_val = np.array([])
    list_mean_err = np.array([])
    list_width_val = np.array([])
    list_width_err = np.array([])
    list_area_val = np.array([])
    list_area_err = np.array([])
    list_offset_val = np.array([])
    list_offset_err = np.array([])
    list_expected_energy = np.array([])


    # Fitte Lorentzkurve an Hauptpeaks an
    for name, data, fit_ranges in [('EU', eu, fit_range_eu), ('CS', cs, fit_range_cs), ('CO', co, fit_range_co)]:

        #data_cutted = np.copy(data)
        #for i, (first, last, expected_energy) in zip(itertools.count(1), fit_ranges):
        #    data_cutted[first:last, 1] = 0

        #events_smooth = scipy.ndimage.filters.gaussian_filter(data_cutted[:, 1], 200)
        #events = data[:, 1] - events_smooth

        fig = pl.figure()

        #ax = fig.add_subplot(1, 1, 1)
        #ax.plot(data[:, 0], data[:, 1])
        #ax.plot(data[:, 0], events_smooth)
        ##ax.plot(energy, events)
        ##ax.set_yscale('log')
        #fig.savefig('_build/Sz_smooth_' + name + '.pdf')
        #fig.clear()

        #ax = fig.add_subplot(1, 1, 1)
        #ax.plot(data[:, 0], events)
        ##ax.plot(energy, events)
        ##ax.set_yscale('log')
        #fig.savefig('_build/Sz_smoothed_' + name + '.pdf')
        #fig.clear()

        #data[:, 1] = events


        for i, (first, last, expected_energy) in zip(itertools.count(1), fit_ranges):
            x, y = data[first:last, 0], data[first:last, 1]
            popt, pconv = op.curve_fit(gauss_peak, x, y, p0=[np.mean(x), 100, 300])
            fit_x = np.linspace(np.min(x), np.max(x), 1000)
            fit_y = gauss_peak(fit_x, *popt)

            ax = fig.add_subplot(1, len(fit_ranges), i)
            ax.plot(x, y, marker=None)
            ax.plot(fit_x, fit_y, marker=None)
            ax.margins(0.05)
            for label in ax.get_xticklabels():
                #label.set_fontsize(9)
                label.set_rotation(45)

            perr = np.sqrt(pconv.diagonal())

            parameters = list(zip(popt, perr))
            #print(parameters)

            mean_val, mean_err = parameters[0]
            width_val, width_err = parameters[1]
            area_val, area_err = parameters[2]
            #offset_val, offset_err = parameters[3]

            #print(name, i, 'Integral\t', scipy.integrate.simps(gauss_peak(data[:, 0], *popt), data[:, 0]))
            #print(name, i, 'area\t', area_val, '+-', area_err)
            #print(name, i, 'Daten\t', scipy.integrate.simps(y, x))
            #print()

            list_mean_val = np.append(list_mean_val, mean_val)
            list_mean_err = np.append(list_mean_err, mean_err)
            list_width_val = np.append(list_width_val, width_val * 2)
            list_width_err = np.append(list_width_err, width_err * 2)
            list_area_val = np.append(list_area_val, area_val)
            list_area_err = np.append(list_area_err, area_err)
            #list_offset_val = np.append(list_offset_val, offset_val)
            #list_offset_err = np.append(list_offset_err, offset_err)
            list_expected_energy = np.append(list_expected_energy, expected_energy)

        fig.tight_layout()
        fig.savefig('_build/Sz-'+name+'-peaks.pdf')
        fig.clear()

        #Peak to Total für CS und CO
        if name == 'CS':
            total_area = scipy.integrate.simps(data[:, 1], data[:, 0])
            peak_area = scipy.integrate.simps(data[3031:4007, 1], data[3031:4007, 0])
            return_area = scipy.integrate.simps(data[900:1200, 1], data[900:1200, 0])

            # TODO Fehlerrechnung
            total_area_err = 0
            peak_area_err = 0
            return_area_err = 0

            peak_to_total = peak_area / (total_area - return_area)
            peak_to_total_err = 0
            #print('peak-to-total')
            #print('CS: ', peak_to_total, ' +- ', peak_to_total_err)

        if name == 'CO':
            total_area = scipy.integrate.simps(data[:, 1], data[:, 0])
            peak_area = scipy.integrate.simps(data[5900:6400, 1], data[5900:6400, 0]) + scipy.integrate.simps(data[6700:7200, 1], data[6700:7200, 0])
            return_area = scipy.integrate.simps(data[1200:1600, 1], data[1200:1600, 0])

            # TODO Fehlerrechnung
            total_area_err = 0
            peak_area_err = 0
            return_area_err = 0

            peak_to_total = peak_area / (total_area - return_area)
            peak_to_total_err = 0
            #print('peak-to-total')
            #print('CO: ', peak_to_total, ' +- ', peak_to_total_err)


    # Erstellen der Energieeichung
    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    x = list_mean_val
    y = list_expected_energy
    popt, pconv = op.curve_fit(linear, x, y)
    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)
    ax.plot(fit_x, fit_y)
    ax.errorbar(list_mean_val, list_expected_energy, xerr=list_mean_err, marker='+', linestyle='none')
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Energie / keV')
    ax.margins(0.05)
    ax.grid(True)
    perr = np.sqrt(pconv.diagonal())
    parameters = list(zip(popt, perr))
    slope_val, slope_err = parameters[0]
    offset_val, offset_err = parameters[1]
    fig.tight_layout()
    fig.savefig('_build/sz_channels.pdf')
    T['sz_slope'] = unitprint.siunitx(slope_val, slope_err)
    T['sz_offset'] = unitprint.siunitx(offset_val, offset_err)


    # Halbwertsbreiten der Peaks
    list_intensity_val = list_area_val * list_mean_val
    list_intensity_err = np.sqrt(
        (list_area_err * list_mean_val)**2
        + (list_area_val * list_mean_err)**2
    )

    rescale = list_intensity_val[-1] / 1000

    list_intensity_val /= rescale
    list_intensity_err /= rescale

    fit_data = list(zip(
        [str(i) for i in range(1, len(list_mean_val) +1)],
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_width_val, list_width_err),
        unitprint.siunitx(list_area_val, list_area_err),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        unitprint.siunitx(list_expected_energy),
    ))

    T['sz_fits_table'] = fit_data


def calibrate_ge(T):
    underground = load_data_normalized('Ge_Untergrund')
    co = load_data_normalized('Ge_CO')
    cs = load_data_normalized('Ge_CS')
    eu = load_data_normalized('Ge_EU')

    # Subtract underground from measurements.
    co[:, 1] -= underground[:, 1]
    cs[:, 1] -= underground[:, 1]
    eu[:, 1] -= underground[:, 1]


    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(co[:, 0], co[:, 1], marker=None)
    ax.margins(0.05)
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Ereignisse')
    fig.tight_layout()
    fig.savefig('_build/Ge_calib.pdf')
    fig.clear()

    # Kanalbereich und bekannte Energien

    fit_range_co = [
            (6550, 6650, 1173.237),
            (7450, 7550, 1332.501),
    ]

    fit_range_cs = [
            (3650, 3800, 661.66),
    ]

    fit_range_eu = [
        (625, 716, 121.7825),
        (1318, 1407, 244.6989),
        (1878, 1971, 344.281),
        (4333, 4423, 778.903),
        (5380, 5466, 964.131),
        (6212, 6295, 1112.116),
        (7883, 7970, 1408.011),
    ]

    fig = pl.figure()

    list_mean_val = np.array([])
    list_mean_err = np.array([])
    list_width_val = np.array([])
    list_width_err = np.array([])
    list_area_val = np.array([])
    list_area_err = np.array([])
    list_offset_val = np.array([])
    list_offset_err = np.array([])
    list_expected_energy = np.array([])


    count = 0
    for name, data, fit_ranges in [('EU', eu, fit_range_eu), ('CS', cs, fit_range_cs), ('CO', co, fit_range_co)]:
        for i, (first, last, expected_energy) in zip(itertools.count(1), fit_ranges):
            x, y = data[first:last, 0], data[first:last, 1]
            popt, pconv = op.curve_fit(lorentz_peak, x, y, p0=[np.mean(x), 10, 100, 0])
            fit_x = np.linspace(np.min(x), np.max(x), 1000)
            fit_y = lorentz_peak(fit_x, *popt)

            ax = fig.add_subplot(3, (len(fit_ranges) + 2)//3, i)
            ax.plot(x, y, marker=None)
            ax.plot(fit_x, fit_y, marker=None)
            ax.margins(0.05)
            for label in ax.get_xticklabels():
                #label.set_fontsize(9)
                label.set_rotation(45)

            perr = np.sqrt(pconv.diagonal())

            parameters = list(zip(popt, perr))

            mean_val, mean_err = parameters[0]
            width_val, width_err = parameters[1]
            area_val, area_err = parameters[2]
            offset_val, offset_err = parameters[3]

            #print(name, i, 'Integral\t', scipy.integrate.simps(lorentz_peak(data[:, 0], *popt), data[:, 0]))
            #print(name, i, 'area\t', area_val, '+-', area_err)
            #print(name, i, 'Daten\t', scipy.integrate.simps(y, x))
            #print()

            list_mean_val = np.append(list_mean_val, mean_val)
            list_mean_err = np.append(list_mean_err, mean_err)
            list_width_val = np.append(list_width_val, width_val)
            list_width_err = np.append(list_width_err, width_err)
            list_area_val = np.append(list_area_val, area_val)
            list_area_err = np.append(list_area_err, area_err)
            list_offset_val = np.append(list_offset_val, offset_val)
            list_offset_err = np.append(list_offset_err, offset_err)
            list_expected_energy = np.append(list_expected_energy, expected_energy)

            count += 1

        if name == 'EU':
            first_eu = 0
            last_eu = count

            fig.tight_layout()
            fig.savefig('_build/Ge_calib-peaks.pdf')
            fig.clear()

        elif name == 'CS':
            first_cs = last_eu + 1
            last_cs = count

            fig.clear()

        elif name == 'CO':
            first_co = last_cs + 1
            last_co = count

            fig.clear()

    #print(len(list_area_val))
    #print(first_eu, last_eu, first_cs, last_cs, first_co, last_co)

    # Halbwertsbreiten der Peaks

    list_intensity_val = list_area_val * list_mean_val
    list_intensity_err = np.sqrt(
        (list_area_err * list_mean_val)**2
        + (list_area_val * list_mean_err)**2
    )

    # Scaliere auf den letzten Eu Peak

    rescale = list_intensity_val[last_eu - 1] / 1000

    list_intensity_val /= rescale
    list_intensity_err /= rescale

    fit_data = list(zip(
        [str(i) for i in range(1, len(list_mean_val) +1)],
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_width_val, list_width_err),
        unitprint.siunitx(list_area_val, list_area_err),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        unitprint.siunitx(list_expected_energy),
    ))

    T['ge_eu_fits_table'] = fit_data[first_eu:last_eu]
    T['ge_cs_fits_table'] = fit_data[first_cs - 1:last_cs]
    T['ge_co_fits_table'] = fit_data[first_co - 1:last_co]


    # Eu Intensitäten

    expected_rel_intensity = np.array([
        1362.0,
        359.0,
        1275.0,
        621.6,
        693.4,
        689.0,
        1000.0,
    ])


    efficiency_val = list_intensity_val[first_eu:last_eu] / expected_rel_intensity
    efficiency_err = list_intensity_err[first_eu:last_eu] / expected_rel_intensity

    # Detektoreffizienz mit Eu Spektrum

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.errorbar(list_expected_energy[first_eu:last_eu], efficiency_val, efficiency_err, marker='+', linestyle='none')
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Effizienz')
    ax.margins(0.05)
    ax.grid(True)
    fig.tight_layout()
    fig.savefig('_build/ge_efficiency.pdf')

    T['ge_efficiency_table'] = list(zip(
        unitprint.siunitx(list_expected_energy),
        unitprint.siunitx(expected_rel_intensity),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        unitprint.siunitx(efficiency_val, efficiency_err),
    ))

    # Plot zur Energiekalibrierung

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    x = list_mean_val
    y = list_expected_energy
    popt, pconv = op.curve_fit(linear, x, y)
    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)
    ax.plot(fit_x, fit_y)
    ax.errorbar(list_mean_val, list_expected_energy, xerr=list_mean_err, marker='+', linestyle='none')
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Energie / keV')
    ax.margins(0.05)
    ax.grid(True)
    perr = np.sqrt(pconv.diagonal())
    parameters = list(zip(popt, perr))
    slope_val, slope_err = parameters[0]
    offset_val, offset_err = parameters[1]
    fig.tight_layout()
    fig.savefig('_build/ge_channels.pdf')
    T['ge_slope'] = unitprint.siunitx(slope_val, slope_err)
    T['ge_offset'] = unitprint.siunitx(offset_val, offset_err)


    # Breiten gegen Energie mit Eu Spektrum

    x = linear(list_mean_val[first_eu:last_eu], slope_val, offset_val)
    y = (list_width_val[first_eu:last_eu] * slope_val)**2
    # TODO Fehlerfortpflanzung für `x` und `y` wenn noch Zeit ist.
    x_err = linear_err(list_mean_val[first_eu:last_eu], list_mean_err[first_eu:last_eu], slope_val, slope_err, offset_val, offset_err)
    y_err = 2 * (list_width_val[first_eu:last_eu] * slope_val) * np.sqrt((list_width_val[first_eu:last_eu] * slope_err)**2 + (list_width_err[first_eu:last_eu] * slope_val)**2)
    popt, pconv = op.curve_fit(linear, x, y)
    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)
    perr = np.sqrt(pconv.diagonal())
    parameters = list(zip(popt, perr))
    const_sq_val, const_sq_err = parameters[0]
    electronic_width_sq_val, electronic_width_sq_err = parameters[1]

    const_val = np.sqrt(const_sq_val)
    const_err = const_sq_err / (2 * const_val)

    electronic_width_val = np.sqrt(electronic_width_sq_val)
    electronic_width_err = electronic_width_sq_err / (2 * electronic_width_val)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.errorbar(x, y, xerr=x_err, yerr=y_err, marker='+', linestyle='none')
    ax.set_ylabel('$\Gamma^2 / \mathrm{keV}^2$')
    ax.set_xlabel('$E_\gamma$ / keV')
    ax.plot(fit_x, fit_y)
    fig.tight_layout()
    fig.savefig('_build/halbwertsbreite_ge.pdf')

    T['ge_const'] = unitprint.siunitx(const_val, const_err)
    T['ge_electronic_width'] = unitprint.siunitx(electronic_width_val, electronic_width_err)

    # Langzeitmessung

    langzeit_daten = load_data_normalized('Langzeit_Probe')
    langzeit_untergrund = load_data_normalized('Langzeit_Untergrund')

    events = langzeit_daten[:, 1] - langzeit_untergrund[:, 1]
    channel = langzeit_daten[:, 0]
    energy = linear(channel, slope_val, offset_val)

    #print(np.max(langzeit_daten[:, 1]))
    #print(np.max(langzeit_untergrund[:, 1]))

    #print(np.max(events))

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(energy, langzeit_daten[:, 1])
    ax.plot(energy, langzeit_untergrund[:, 1])
    ax.set_yscale('log')
    fig.savefig('_build/langzeit.pdf')

    events_smooth = scipy.ndimage.filters.gaussian_filter(langzeit_daten[:, 1], 200)
    events = langzeit_daten[:, 1] - events_smooth

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(energy, langzeit_daten[:, 1])
    ax.plot(energy, events_smooth)
    #ax.plot(energy, events)
    ax.set_yscale('log')
    fig.savefig('_build/langzeit2.pdf')

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(energy[energy > 50], events[energy > 50])
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Ereignisse')
    ax.margins(0.05)
    ax.grid(True)
    fig.tight_layout()
    fig.savefig('_build/langzeit3.pdf')

    np.savetxt('_build/langzeit.tsv', np.column_stack([energy, events]))
    np.savetxt('_build/langzeit-orig.tsv', np.column_stack([energy, langzeit_daten[:, 1]]))

def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)

def main():
    T = {}

    ###########################################

    calibrate_sz(T)
    calibrate_ge(T)
    plot_pair('Ge_CO', 'Ge_Untergrund')
    plot_pair('Ge_CS', 'Ge_Untergrund')
    plot_pair('Ge_EU', 'Ge_Untergrund')

    plot_pair('Sz_CO', 'Sz_Untergrund')
    plot_pair('Sz_CS', 'Sz_Untergrund')
    plot_pair('Sz_EU', 'Sz_Untergrund')

    ###########################################

    subprocess.check_call(['./element_match'])

    ###########################################


    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
