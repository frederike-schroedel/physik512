#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2015 Martin Ueding <dev@martin-ueding.de>

import argparse
import colorsys
import itertools
import pprint

import matplotlib.pyplot as pl
import numpy as np
import pandas as pd
import scipy.integrate
import scipy.ndimage.filters


colors = [
'#a6cee3',
'#1f78b4',
'#b2df8a',
'#33a02c',
'#fb9a99',
'#e31a1c',
'#fdbf6f',
'#ff7f00',
'#cab2d6',
'#6a3d9a',
'#b15928',
]

linestyles = [
    'solid',
    'dashed',
    'dotted',
    'dash_dot',
]

pp = pprint.PrettyPrinter()

def lorentz_peak(x, mean, width, area, offset):
    return area / np.pi * width/2 / ((x - mean)**2 + (width/2)**2) + offset

def load_lines():
    filename = 'Daten/generiesb.dat'
    data = pd.read_csv(filename, header=0, delim_whitespace=True)

    return data

def get_peaks():
    return np.loadtxt('Daten/Langzeit_Peaks.dat')

def main():
    options = _parse_args()

    messwerte = np.loadtxt('_build/langzeit.tsv')

    messwerte = messwerte[messwerte[:, 0] > 200]

    messwerte_smooth = scipy.ndimage.filters.gaussian_filter(messwerte[:, 1], 100)
    ohne_untergrund = messwerte[:, 1] - messwerte_smooth

    #print(messwerte.shape)

    peaks = get_peaks()

    lines = load_lines()

    pad = 2

    elements = list(set(lines['Nuclide']))
    #print(elements)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    results = {}

    m = 0

    attr_iter = itertools.cycle(itertools.product(linestyles, colors))

    exclude = [
            '11-Na-22',
            '21-Sc-46',
            '25-Mn-54',
            '25-Mn-56',
            '27-Co-56',
            '27-Co-58',
            '27-Co-60',
            '30-Zn-65',
            '31-Ga-66',
            '36-Kr-85',
            '38-Sr-85',
            '41-Nb-95',
            '44-Ru-106',
            '45-Rh-106',
            '55-Cs-134',
            '67-Ho-166',
            '88-Ra-224',
    ]

    exclude = []

    candidates = []

    for element in elements:
        if element in exclude:
            continue

        selection = lines['Nuclide'] == element
        selected = lines[selection]

        x = messwerte[:, 0]
        y = np.zeros(x.shape)

        for id, energy, delta_energy, sigma_val, sigma_err, nuclide in selected.itertuples():
            y += lorentz_peak(x, energy, 1.5, sigma_val, 0)


        self_integral = scipy.integrate.simps(y, x)
        overlap = y * ohne_untergrund
        overlap_integral = scipy.integrate.simps(overlap, x)

        score = overlap_integral / self_integral

        results[element] = score

        candidates.append((score, element, y / self_integral))

    fit_range = [
            (237, 241),
            (241, 243),
            (294, 297),
            (337, 340),
            (350, 354),
            (459, 467),
            (509, 513),
            (582, 585),
            (608, 612),
            (660, 664),
            (727, 728),
            (767, 770),
            (791, 799),
            (859, 863),
            (910, 913),
            (963, 967),
            (967, 972),
            (1118, 1123),
            (1236, 1241),
            (1375, 1380),
            ]

    max_score = max([x[0] for x in candidates])
    min_score = min([x[0] for x in candidates])

    linestyle_iter = itertools.cycle(linestyles)

    for score, element, y in itertools.islice(reversed(sorted(candidates)), options.num):
        if options.score:
            linestyle = 'solid'
            alpha = 1
            ratio = (score - min_score) / (max_score - min_score)
            color = colorsys.hsv_to_rgb(0.5*ratio, 1.0, .8)
        else:
            linestyle, color = next(attr_iter)
            alpha = 1
        ax.plot(x, y, label=element, color=color, alpha=alpha, linestyle=linestyle, linewidth=2)
        m = max(m, np.max(y))


    m2 = np.max(messwerte[:, 1])

    #print('m', m)
    #print('m2', m2)
    scale = ax.get_ylim()[1] / m2
    #print('Scale', scale)

    ax.plot(x, messwerte[:, 1] * scale, alpha=0.3, color='black')
    ax.plot(x, messwerte_smooth * scale, alpha=0.3, color='black')

    ax.grid(True)
    ax.margins(.05)
    ax.set_xlabel('Energie / keV')
    ax.set_ylabel('Ereignisse / willkürlich')
    fig.tight_layout()

    if options.show:
        ax.legend(loc='best')
        fig.show()
        input()
    else:
        ax.legend(loc='best', prop={'size': 9})
        fig.savefig('_build/element_match_{}.pdf'.format('score' if options.score else 'contrast'))

    padding = 2

    fig.set_size_inches(7, 4)

    i = 1
    for bottom, top in fit_range:
        print('Erzeuge Plot von {} bis {} keV …'.format(bottom, top))
        ax.set_xlim(bottom - padding, top + padding)
        fig.tight_layout()
        fig.savefig('_build/element_match_{}_{}.pdf'.format(i, 'score' if options.score else 'contrast'))
        i += 1


    results_sorted = sorted([(matchness, element) for element, matchness in results.items()])

    # Zeige Matchness an

    #for matchness, element in results_sorted:
    #   print('{:5s} {:+.10f}'.format(element, matchness))



def _parse_args():
    '''
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    '''
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--show', action='store_true')
    parser.add_argument('--score', action='store_true')
    parser.add_argument('--num', type=int, default=22)
    options = parser.parse_args()

    return options

if __name__ == '__main__':
    main()
