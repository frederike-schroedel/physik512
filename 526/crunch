#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import itertools
import json
import os.path
import pprint
import re
import sys

import matplotlib.pyplot as pl
import matplotlib.colors
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import scipy.integrate
import scipy.interpolate
import unitprint

_livetime_pattern = re.compile(r'LIVETIME: (\d+\.?\d*)')

def gauss_peak(x, mean, width, area):
    '''
    Gausskurve
    '''
    return area / (width * np.sqrt(2 * np.pi)) * np.exp( - ((x - mean) / width)**2 / 2)

def decay(x, a):
    '''
    Exponentieller Abfall
    '''
    return np.exp(- x * a)

def linear(x, slope, offset):
    return x * slope + offset

def linear_err(x, x_err, slope_val, slope_err, offset_val, offset_err):
    return np.sqrt((x_err * slope_val)**2 + (x * slope_err)**2 + offset_err**2)

def extract_livetime(metafile):
    with open(metafile) as f:
        for line in f:
            m = _livetime_pattern.search(line)
            if m:
                return float(m.group(1))

def load_data_normalized(basename, lower_cut=0, upper_cut=-1):
    '''
    Loads the data and normalizes it to give events per second.
    '''
    datafile = 'Daten/' + basename + '.txt'
    metafile = 'Daten/' + basename + '.mcd'

    livetime = extract_livetime(metafile)

    data = np.loadtxt(datafile)

    data[:, 1] /= livetime

    data = data[lower_cut:upper_cut]

    return data

def fit_peak(name, data, first, last, energy, show=False, save=False):
    '''
    Passt einen Peak an
    :show zeigt die einzelne Anpassung
    :save speichert gesamtes Spektrum in Datei

    :return Mittelpunkt, Fehler Mittelpunkt, Breite, Fehler Breite, Fläche, Fehler Fläche, Energie
    '''

    x, y = data[first:last, 0], data[first:last, 1]
    popt, pconv = op.curve_fit(gauss_peak, x, y, p0=[np.mean(x), 200, 100])
    perr = np.sqrt(pconv.diagonal())

    if show:
        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = gauss_peak(fit_x, *popt)

        ax.plot(x, y, marker=None, label=name)
        ax.plot(fit_x, fit_y, marker=None)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        ax.legend(loc='best')
        fig.tight_layout()
        fig.show()
        print('Waiting for input ...')
        input()
        fig.clear()
        pl.close

    if save:
        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = gauss_peak(fit_x, *popt)

        ax.plot(x, y, marker=None, alpha=0.6, color='#377eb8')
        ax.plot(fit_x, fit_y, marker=None, alpha=0.6, color='#e41a1c', linewidth=2)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_fit_peak_'+ name +'.pdf')
        fig.clear

    return popt[0], perr[0], popt[1], perr[1], popt[2], perr[2], energy


def job_total_cross_section(T):
    lower_cut = 200
    upper_cut = 8000

    data_untergrund = load_data_normalized('m01_untergrund', lower_cut, upper_cut)
    data_01mm = load_data_normalized('m01_1mm', lower_cut, upper_cut)
    data_05mm = load_data_normalized('m01_5mm', lower_cut, upper_cut)
    data_10mm = load_data_normalized('m01_10mm', lower_cut, upper_cut)
    data_20mm = load_data_normalized('m01_20mm', lower_cut, upper_cut)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    points = []

    first = 6200 - lower_cut
    last = 7600 - lower_cut

    for name, data, color in [('ohne', data_untergrund,'#e41a1c'),
                              ('01mm', data_01mm, '#377eb9'),
                              ('05mm', data_05mm, '#4daf4a'),
                              ('10mm', data_10mm, '#984ea4'),
                              ('20mm', data_20mm, '#ff7f01')]:
        points.append(fit_peak(name, data, first, last, 662, save=True))
        tmp_point = np.array(points[-1])
        x, y = data[first:last, 0], data[first:last, 1]
        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = gauss_peak(fit_x, tmp_point[-7], tmp_point[-5], tmp_point[-3])

        ax.plot(x, y, marker=None, alpha=0.4, color=color)
        ax.plot(fit_x, fit_y, marker = None, color=color, label=name, linewidth=2)

    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Ereignisse / s')
    ax.legend(loc='best')
    fig.tight_layout()
    fig.savefig('_build/total-cross-section-data.pdf')
    fig.clear

    points = np.array(points)

    list_dicke = np.array([0, 1, 5, 10, 20])
    list_mean_val = points[:, 0]
    list_mean_err = points[:, 1]
    list_full_width_val = points[:, 2] * 2 * np.sqrt(2 * np.log(2))
    list_full_width_err = points[:, 3] * 2 * np.sqrt(2 * np.log(2))
    list_area_val = points[:, 4]
    list_area_err = points[:, 5]


    # Relative Intensität bestimmen:

    list_intensity_val = np.copy(list_area_val)
    list_intensity_err = np.copy(list_area_err)
    #list_intensity_val = list_area_val * list_mean_val
    #list_intensity_err = np.sqrt(
    #    (list_area_err * list_mean_val)**2
    #    + (list_area_val * list_mean_err)**2
    #)

    rescale = list_intensity_val[0]

    list_intensity_val /= rescale
    list_intensity_err /= rescale

    popt, pconv = op.curve_fit(decay, list_dicke[:-1], list_intensity_val[:-1], p0=[1])
    perr = np.sqrt(pconv.diagonal())
    x = np.linspace(np.min(list_dicke), np.max(list_dicke), 100)
    y = decay(x, *popt)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    ax.errorbar(list_dicke, list_intensity_val, list_intensity_err, marker='+', linestyle='none')
    ax.plot(x, y)

    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Dicke / mm')
    ax.set_ylabel('relative Intensität')
    fig.tight_layout()
    fig.savefig('_build/total-cross-section-fit.pdf')
    fig.clear


    T['total_cross_section_table'] = list(zip(
        unitprint.siunitx(list_dicke),
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_full_width_val, list_full_width_err),
        unitprint.siunitx(list_intensity_val, list_intensity_err),
        ))

    # Absorbtionseigenschaften von Aluminium

    dichte = 2.7
    dichte_si = dichte * 1e-3
    amu = 26.981528
    na = 6.022e23

    n = dichte_si * na / amu

    sigma_val = popt[0] / n
    sigma_err = perr[0] / n

    T['alu_dichte'] = unitprint.siunitx(dichte)
    T['alu_amu'] = unitprint.siunitx(amu)
    T['alu_n'] = unitprint.siunitx(n)
    T['alu_a'] = unitprint.siunitx(popt[0], perr[0])
    T['alu_sigma'] = unitprint.siunitx(sigma_val / 1e-22, sigma_err / 1e-22)


def job_energy_calibration(T):

    lower_cut = 200
    upper_cut = 8000

    data_untergrund = load_data_normalized('m02_untergrund', lower_cut, upper_cut)
    data_cs = load_data_normalized('m01_untergrund', lower_cut, upper_cut)
    data_ba = load_data_normalized('m02_Ba', lower_cut, upper_cut)
    data_eu = load_data_normalized('m02_Eu', lower_cut, upper_cut)

    for name, data in [('Ba', data_ba), ('Eu', data_eu)]:
        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]
        ax.plot(x, y, marker=None, alpha=0.6, label='Spektrum', color='#377eb8')

        x_untergrund, y_untergrund = data_untergrund[:, 0], data_untergrund[:, 1]
        ax.plot(x_untergrund, y_untergrund, marker=None, alpha=0.6, color='#e41a1c', label='Untergrund')

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        ax.legend(loc='best')
        fig.tight_layout()
        fig.savefig('_build/plot_data_raw_' + name + '.pdf')
        fig.clear


    data_ba[:, 1] -= data_untergrund[:, 1]
    data_eu[:, 1] -= data_untergrund[:, 1]

    points = []

    fit_range_cs = [
            (6200, 7600, 661.66),
            ]

    fit_range_ba = [
            (275, 475, 30.8502),
            (800, 1100, 80.9979),
            (2700, 3500, 302.8508),
            (3600, 4000, 356.0129),
            ]

    fit_range_eu = [
            (400, 550, 39.9049),
            (1250, 1500, 121.7817),
            (2400, 3000, 244.6974),
            (3200, 4200, 344.2785),
            ]

    for name, data, fit_range in [('Cs', data_cs, fit_range_cs),
                              ('Ba', data_ba, fit_range_ba),
                              ('Eu', data_eu, fit_range_eu)]:

        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]
        ax.plot(x, y, marker=None, alpha=0.6, color='#377eb9')

        for i, (first, last, expected_energy) in zip(itertools.count(1), fit_range):
            first -= lower_cut
            last -= lower_cut
            points.append(fit_peak(name, data, first, last, expected_energy))
            tmp_point = np.array(points[-1])

            fit_x = np.linspace(np.min(x), np.max(x), 1000)
            fit_y = gauss_peak(fit_x, tmp_point[-7], tmp_point[-5], tmp_point[-3])

            ax.plot(fit_x, fit_y, marker = None, alpha=0.6, color='#e41a1c', linewidth=2)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_peaks_' + name + '.pdf')
        fig.clear


    points = np.array(points)

    list_mean_val = points[:, 0]
    list_mean_err = points[:, 1]
    list_full_width_val = np.abs(points[:, 2] * 2 * np.sqrt(2 * np.log(2)))
    list_full_width_err = points[:, 3] * 2 * np.sqrt(2 * np.log(2))
    list_area_val = points[:, 4]
    list_area_err = points[:, 5]
    list_expected_energy = points[:, 6]

    T['energy_calibration_table'] = list(zip(
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_full_width_val, list_full_width_err),
        unitprint.siunitx(list_expected_energy),
        ))

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    x, y = list_mean_val, list_expected_energy
    ax.errorbar(list_mean_val, list_expected_energy, xerr=list_mean_err, marker='+', linestyle='none')

    popt, pconv = op.curve_fit(linear, x, y)
    perr = np.sqrt(pconv.diagonal())

    fit_x = np.linspace(np.min(x), np.max(x), 100)
    fit_y = linear(fit_x, *popt)
    ax.plot(fit_x, fit_y)

    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Energie / keV')
    fig.tight_layout()
    fig.savefig('_build/plot_energy-calibrate-fit.pdf')
    fig.clear

    slope_val, slope_err = popt[0], perr[0]
    offset_val, offset_err = popt[1], perr[1]

    T['energy_slope'] = unitprint.siunitx(slope_val, slope_err)
    T['energy_offset'] = unitprint.siunitx(offset_val, offset_err)

    def energy_calibration(x):
        return linear(x, slope_val, offset_val)
    return energy_calibration


def job_scattering(T):

    energy_calibration = job_energy_calibration(T)

    lower_cut = 200
    upper_cut = 8000

    w035_untergrund = load_data_normalized('m03_untergrund_35', lower_cut, upper_cut)
    w040_untergrund = load_data_normalized('m03_untergrund_40', lower_cut, upper_cut)
    w045_untergrund = load_data_normalized('m03_untergrund_45', lower_cut, upper_cut)
    w050_untergrund = load_data_normalized('m03_untergrund_50', lower_cut, upper_cut)
    w055_untergrund = load_data_normalized('m03_untergrund_55', lower_cut, upper_cut)
    w060_untergrund = load_data_normalized('m03_untergrund_60', lower_cut, upper_cut)
    w065_untergrund = load_data_normalized('m03_untergrund_65', lower_cut, upper_cut)
    w070_untergrund = load_data_normalized('m03_untergrund_70', lower_cut, upper_cut)
    w075_untergrund = load_data_normalized('m03_untergrund_75', lower_cut, upper_cut)
    w080_untergrund = load_data_normalized('m03_untergrund_80', lower_cut, upper_cut)
    w085_untergrund = load_data_normalized('m03_untergrund_85', lower_cut, upper_cut)
    w090_untergrund = load_data_normalized('m03_untergrund_90', lower_cut, upper_cut)
    w095_untergrund = load_data_normalized('m03_untergrund_95', lower_cut, upper_cut)
    w100_untergrund = load_data_normalized('m03_untergrund_100', lower_cut, upper_cut)
    w105_untergrund = load_data_normalized('m03_untergrund_105', lower_cut, upper_cut)
    w110_untergrund = load_data_normalized('m03_untergrund_110', lower_cut, upper_cut)
    w115_untergrund = load_data_normalized('m03_untergrund_115', lower_cut, upper_cut)
    w120_untergrund = load_data_normalized('m03_untergrund_120', lower_cut, upper_cut)

    w035_data = load_data_normalized('m03_PMMA_35', lower_cut, upper_cut)
    w040_data = load_data_normalized('m03_PMMA_40', lower_cut, upper_cut)
    w045_data = load_data_normalized('m03_PMMA_45', lower_cut, upper_cut)
    w050_data = load_data_normalized('m03_PMMA_50', lower_cut, upper_cut)
    w055_data = load_data_normalized('m03_PMMA_55', lower_cut, upper_cut)
    w060_data = load_data_normalized('m03_PMMA_60', lower_cut, upper_cut)
    w065_data = load_data_normalized('m03_PMMA_65', lower_cut, upper_cut)
    w070_data = load_data_normalized('m03_PMMA_70', lower_cut, upper_cut)
    w075_data = load_data_normalized('m03_PMMA_75', lower_cut, upper_cut)
    w080_data = load_data_normalized('m03_PMMA_80', lower_cut, upper_cut)
    w085_data = load_data_normalized('m03_PMMA_85', lower_cut, upper_cut)
    w090_data = load_data_normalized('m03_PMMA_90', lower_cut, upper_cut)
    w095_data = load_data_normalized('m03_PMMA_95', lower_cut, upper_cut)
    w100_data = load_data_normalized('m03_PMMA_100', lower_cut, upper_cut)
    w105_data = load_data_normalized('m03_PMMA_105', lower_cut, upper_cut)
    w110_data = load_data_normalized('m03_PMMA_110', lower_cut, upper_cut)
    w115_data = load_data_normalized('m03_PMMA_115', lower_cut, upper_cut)
    w120_data = load_data_normalized('m03_PMMA_120', lower_cut, upper_cut)

    for name, data, untergrund in [
            ('w035', w035_data, w035_untergrund),
            ('w040', w040_data, w040_untergrund),
            ('w045', w045_data, w045_untergrund),
            ('w050', w050_data, w050_untergrund),
            ('w055', w055_data, w055_untergrund),
            ('w060', w060_data, w060_untergrund),
            ('w065', w065_data, w065_untergrund),
            ('w070', w070_data, w070_untergrund),
            ('w075', w075_data, w075_untergrund),
            ('w080', w080_data, w080_untergrund),
            ('w085', w085_data, w085_untergrund),
            ('w090', w090_data, w090_untergrund),
            ('w095', w095_data, w095_untergrund),
            ('w100', w100_data, w100_untergrund),
            ('w105', w105_data, w105_untergrund),
            ('w110', w110_data, w110_untergrund),
            ('w115', w115_data, w115_untergrund),
            ('w120', w120_data, w120_untergrund),]:

        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]
        ax.plot(x, y, marker=None, alpha=0.6, label='Spektrum', color='#377eb8')

        x_untergrund, y_untergrund = untergrund[:, 0], untergrund[:, 1]
        ax.plot(x_untergrund, y_untergrund, marker=None, alpha=0.6, color='#e41a1c', label='Untergrund')

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        ax.legend(loc='best')
        fig.tight_layout()
        fig.savefig('_build/plot_raw_' + name + '.pdf')
        fig.clear
        pl.close()


    w035_data[:, 1] -= w035_untergrund[:, 1]
    w040_data[:, 1] -= w040_untergrund[:, 1]
    w045_data[:, 1] -= w045_untergrund[:, 1]
    w050_data[:, 1] -= w050_untergrund[:, 1]
    w055_data[:, 1] -= w055_untergrund[:, 1]
    w060_data[:, 1] -= w060_untergrund[:, 1]
    w065_data[:, 1] -= w065_untergrund[:, 1]
    w070_data[:, 1] -= w070_untergrund[:, 1]
    w075_data[:, 1] -= w075_untergrund[:, 1]
    w080_data[:, 1] -= w080_untergrund[:, 1]
    w085_data[:, 1] -= w085_untergrund[:, 1]
    w090_data[:, 1] -= w090_untergrund[:, 1]
    w095_data[:, 1] -= w095_untergrund[:, 1]
    w100_data[:, 1] -= w100_untergrund[:, 1]
    w105_data[:, 1] -= w105_untergrund[:, 1]
    w110_data[:, 1] -= w110_untergrund[:, 1]
    w115_data[:, 1] -= w115_untergrund[:, 1]
    w120_data[:, 1] -= w120_untergrund[:, 1]


    points = []

    for name, data, first, last in [
            ('w035', w035_data, 4700, 6200),
            ('w040', w040_data, 4000, 6100),
            ('w045', w045_data, 2000, 7000),
            ('w050', w050_data, 2000, 7000),
            ('w055', w055_data, 2000, 7000),
            ('w060', w060_data, 2000, 7000),
            ('w065', w065_data, 2000, 7000),
            ('w070', w070_data, 2000, 7000),
            ('w075', w075_data, 2000, 7000),
            ('w080', w080_data, 2000, 7000),
            ('w085', w085_data, 2000, 7000),
            ('w090', w090_data, 2000, 7000),
            ('w095', w095_data, 1500, 7000),
            ('w100', w100_data, 1500, 3500),
            ('w105', w105_data, 1500, 3300),
            ('w110', w110_data, 1500, 3200),
            ('w115', w115_data, 1500, 3200),
            ('w120', w120_data, 1500, 3200),]:

        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]

        first -= lower_cut
        last -= lower_cut
        points.append(fit_peak(name, data, first, last, 0))
        tmp_point = np.array(points[-1])

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = gauss_peak(fit_x, tmp_point[-7], tmp_point[-5], tmp_point[-3])

        ax.plot(energy_calibration(x), y, marker=None, alpha=0.6, color='#377eb9')
        ax.plot(energy_calibration(fit_x), fit_y, marker = None, alpha=0.6, color='#e41a1c', linewidth=2)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Energie / keV')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_anpassung_' + name + '.pdf')
        fig.clear
        pl.close()


    points = np.array(points)

    list_winkel_val = np.array([35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120])
    list_winkel_err = np.array([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])
    list_mean_val = energy_calibration(points[:, 0])
    list_mean_err = energy_calibration(points[:, 1])
    list_full_width_val = np.abs(points[:, 2] * 2 * np.sqrt(2 * np.log(2)))
    list_full_width_err = points[:, 3] * 2 * np.sqrt(2 * np.log(2))
    list_area_val = points[:, 4]
    list_area_err = points[:, 5]


def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)

def main():
    T = {}

    ###########################################

    job_total_cross_section(T)
    #job_energy_calibration(T) <- Aufruf in job_scattering(T)
    job_scattering(T)

    ###########################################


    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
