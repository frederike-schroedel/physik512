#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import itertools
import json
import os.path
import pprint
import re
import sys

import matplotlib.pyplot as pl
import matplotlib.colors
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import scipy.integrate
import scipy.interpolate
import unitprint

_livetime_pattern = re.compile(r'LIVETIME: (\d+\.?\d*)')

def gauss_peak(x, mean, width, area):
    '''
    Gausskurve
    '''
    return area / (width * np.sqrt(2 * np.pi)) * np.exp( - ((x - mean) / width)**2 / 2)

def decay(x, tau, a):
    '''
    Exponentieller Abfall
    '''
    return a * np.exp(- x / tau)

def linear(x, slope, offset):
    return x * slope + offset

def linear_err(x, x_err, slope_val, slope_err, offset_val, offset_err):
    return np.sqrt((x_err * slope_val)**2 + (x * slope_err)**2 + offset_err**2)

def extract_livetime(metafile):
    with open(metafile) as f:
        for line in f:
            m = _livetime_pattern.search(line)
            if m:
                return float(m.group(1))

def load_data_normalized(basename, lower_cut=0, upper_cut=-1):
    '''
    Loads the data and normalizes it to give events per second.
    '''
    datafile = 'Daten/' + basename + '.txt'
    metafile = 'Daten/' + basename + '.mcd'

    livetime = extract_livetime(metafile)

    data = np.loadtxt(datafile)

    data[:, 1] /= livetime

    data = data[lower_cut:upper_cut]

    return data

def fit_peak(name, data, first, last, energy, show=False):
    '''
    Passt einen Peak an und erstellt die Plotdateien

    :return Mittelpunkt, Fehler Mittelpunkt, Breite, Fehler Breite, Fläche, Fehler Fläche, Energie
    '''

    x, y = data[first:last, 0], data[first:last, 1]
    popt, pconv = op.curve_fit(gauss_peak, x, y, p0=[np.mean(x), 100, 300])
    perr = np.sqrt(pconv.diagonal())

    fit_x = np.linspace(np.min(x), np.max(x), 1000)
    fit_y = gauss_peak(fit_x, *popt)

    np.savetxt('_build/plot_fit_peak_'+ name +'.txt', np.column_stack([fit_x, fit_y]))

    if show:
        pl.plot(x, y, marker=None)
        pl.plot(fit_x, fit_y, marker=None)
        pl.show()

    return popt[0], perr[0], popt[1], perr[1], popt[2], perr[2], energy


def job_total_cross_section(T):
    lower_cut = 200
    upper_cut = 8000

    data_untergrund = load_data_normalized('m01_untergrund', lower_cut, upper_cut)
    data_01mm = load_data_normalized('m01_1mm', lower_cut, upper_cut)
    data_05mm = load_data_normalized('m01_5mm', lower_cut, upper_cut)
    data_10mm = load_data_normalized('m01_10mm', lower_cut, upper_cut)
    data_20mm = load_data_normalized('m01_20mm', lower_cut, upper_cut)

    np.savetxt('_build/plot_data_00mm.txt', data_untergrund)
    np.savetxt('_build/plot_data_01mm.txt', data_01mm)
    np.savetxt('_build/plot_data_05mm.txt', data_05mm)
    np.savetxt('_build/plot_data_10mm.txt', data_10mm)
    np.savetxt('_build/plot_data_20mm.txt', data_20mm)

    points = []
    first = 6000
    last = 8000
    points.append(fit_peak('00mm', data_untergrund, first, last, 662))
    points.append(fit_peak('01mm', data_01mm, first, last, 662))
    points.append(fit_peak('05mm', data_05mm, first, last, 662))
    points.append(fit_peak('10mm', data_10mm, first, last, 662))
    points.append(fit_peak('20mm', data_20mm, first, last, 662))

    points = np.array(points)

    dicke = np.array([0, 1, 5, 10, 20])
    mean_val = points[:, 0]
    mean_err = points[:, 1]
    width_val = points[:, 2]
    width_err = points[:, 3]
    area_val = points[:, 4]
    area_err = points[:, 5]

    T['total_cross_section_table'] = list(zip(
        unitprint.siunitx(dicke),
        unitprint.siunitx(area_val, area_err),
        ))

    popt, pconv = op.curve_fit(decay, dicke[:-1], area_val[:-1], p0=[20, 420000])
    x = np.linspace(np.min(dicke), np.max(dicke), 100)
    y = decay(x, *popt)

    np.savetxt('_build/plot-decay-data.txt', np.column_stack([dicke, area_val, area_err]))
    np.savetxt('_build/plot-decay-fit.txt', np.column_stack([x, y]))



def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)

def main():
    T = {}

    ###########################################

    job_total_cross_section(T)

    ###########################################


    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
