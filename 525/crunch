#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import itertools
import json
import os.path
import pprint
import re
import sys
import subprocess

import matplotlib.pyplot as pl
import matplotlib.colors
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import scipy.integrate
import scipy.interpolate
import unitprint

_livetime_pattern = re.compile(r'LIVETIME: (\d+\.?\d*)')

def gauss_peak(x, mean, width, area):
    return area / (width * np.sqrt(2 * np.pi)) * np.exp( - ((x - mean) / width)**2 / 2)

def linear(x, slope, offset):
    return x * slope + offset

def extract_livetime(metafile):
    with open(metafile) as f:
        for line in f:
            m = _livetime_pattern.search(line)
            if m:
                return float(m.group(1))

def load_data_normalized(basename):
    '''
    Loads the data and normalizes it to give events per second.
    '''
    datafile = 'Daten/' + basename + '.txt'
    metafile = 'Daten/' + basename + '.mcd'

    livetime = extract_livetime(metafile)

    data = np.loadtxt(datafile)

    data[:, 1] /= livetime

    return data

def fit_peak(name, data, first, last, energy=0, show=False, save=False, side='', num=0):
    '''
    Passt einen Peak an
    :show zeigt die einzelne Anpassung
    :save speichert gesamtes Spektrum in Datei

    :return Mittelpunkt, Fehler Mittelpunkt, Breite, Fehler Breite, Fläche, Fehler Fläche, Energie
    '''

    x, y = data[first:last, 0], data[first:last, 1]
    popt, pconv = op.curve_fit(gauss_peak, x, y, p0=[np.mean(x), 200, 100])
    perr = np.sqrt(pconv.diagonal())

    if show:
        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = gauss_peak(fit_x, *popt)

        ax.plot(x, y, marker=None, label=name)
        ax.plot(fit_x, fit_y, marker=None)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        ax.legend(loc='best')
        fig.tight_layout()
        fig.show()
        print('Waiting for input ...')
        input()
        fig.clear()
        pl.close()

    if save:
        fig = pl.figure(figsize=(6,4.25))
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[first:last, 0], data[first:last, 1]

        fit_x = np.linspace(np.min(x), np.max(x), 1000)
        fit_y = gauss_peak(fit_x, *popt)

        ax.plot(x, y, marker=None, alpha=0.6, color='#377eb8')
        ax.plot(fit_x, fit_y, marker=None, alpha=0.6, color='#e41a1c', linewidth=2)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_fit_peak_'+ side + '_' + '{}'.format(num) + '_' + name +'.pdf')
        fig.clear

    return popt[0], perr[0], popt[1], perr[1], popt[2], perr[2], energy

def energy_calibration(T, side):
    '''
    Erstellt die Einergiekalibrierung
    Fertigt roh und moved Plots an

    :return Geradenfunktion
    '''

    data_na_raw = load_data_normalized(side + '_Na_spektrum-roh')
    data_na_mov = load_data_normalized(side + '_Na_spektrum-moved')
    data_ba_mov = load_data_normalized(side + '_Ba_spektrum-moved')

    points = []

    for name, data in [('na_raw', data_na_raw), ('na', data_na_mov), ('ba', data_ba_mov)]:
        fig = pl.figure(figsize=(4,3))
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]
        ax.plot(x, y, marker=None, color='#377eb8')

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_spektrum_' + side + '_' + name + '.pdf')
        fig.clear
        pl.close()

    if side == 'li':
        fit_range_na = [
                (6200, 7500, 511),
                ]

        fit_range_ba = [
                (250, 450, 30.8502),
                (1000, 1230, 80.9979),
                (4600, 5200, 356.0129),
                ]

    if side == 're':
        fit_range_na = [
                (6200, 7300, 511),
                ]

        fit_range_ba = [
                (100, 250, 30.8502),
                (850, 1080, 80.9979),
                (4400, 5100, 356.0129),
                ]



    for name, data, fit_range in [('na', data_na_mov, fit_range_na), ('ba', data_ba_mov, fit_range_ba)]:

        fig = pl.figure(figsize=(4,3))
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]
        ax.plot(x, y, marker=None, alpha=0.6, color='#377eb9')

        for i, (first, last, expected_energy) in zip(itertools.count(1), fit_range):
            points.append(fit_peak(name, data, first, last, expected_energy, save=True, side=side, num=i))
            tmp_point = np.array(points[-1])

            fit_x = np.linspace(np.min(x), np.max(x), 1000)
            fit_y = gauss_peak(fit_x, tmp_point[-7], tmp_point[-5], tmp_point[-3])

            ax.plot(fit_x, fit_y, marker = None, alpha=0.6, color='#e41a1c', linewidth=2)

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        fig.tight_layout()
        fig.savefig('_build/plot_peaks_' + side + '_' + name + '.pdf')
        fig.clear
        pl.close()


    points = np.array(points)

    list_mean_val = points[:, 0]
    list_mean_err = points[:, 1]
    list_full_width_val = np.abs(points[:, 2] * 2 * np.sqrt(2 * np.log(2)))
    list_full_width_err = points[:, 3] * 2 * np.sqrt(2 * np.log(2))
    list_area_val = points[:, 4]
    list_area_err = points[:, 5]
    list_expected_energy = points[:, 6]

    T[side + '_energy_calibration_table'] = list(zip(
        unitprint.siunitx(list_mean_val, list_mean_err),
        unitprint.siunitx(list_full_width_val, list_full_width_err),
        unitprint.siunitx(list_expected_energy),
        ))

    fig = pl.figure(figsize=(4,3))
    ax = fig.add_subplot(1, 1, 1)

    x, y = list_mean_val, list_expected_energy
    ax.errorbar(list_mean_val, list_expected_energy, xerr=list_mean_err, marker='+', linestyle='none')

    popt, pconv = op.curve_fit(linear, x, y)
    perr = np.sqrt(pconv.diagonal())

    fit_x = np.linspace(np.min(x), np.max(x), 100)
    fit_y = linear(fit_x, *popt)
    ax.plot(fit_x, fit_y)

    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Energie / keV')
    for label in ax.get_xticklabels():
        label.set_rotation(45)
    fig.tight_layout()
    fig.savefig('_build/plot_energy_calibrate_fit_' + side + '.pdf')
    fig.clear
    pl.close()

    slope_val, slope_err = popt[0], perr[0]
    offset_val, offset_err = popt[1], perr[1]

    T[side + '_energy_slope'] = unitprint.siunitx(slope_val, slope_err)
    T[side + '_energy_offset'] = unitprint.siunitx(offset_val, offset_err)

    def calibration(x):
        return linear(x, slope_val, offset_val)

    def calibration_err(x):
        return np.sqrt((x * slope_err)**2 + offset_err**2)

    #TODO Energieauflösung hier bestimmen und in Tabellen ausgeben

    return calibration, calibration_err

def extract_boundaries(T, name, threshold, energy, energy_err, show=False):
    data = load_data_normalized(name + '_spektrum-filter')
    channel = data[:, 0]
    counts = data[:, 1]

    selection = counts > threshold

    lower = np.min(channel[selection])
    upper = np.max(channel[selection])

    T[name + '_lower_channel'] = lower
    T[name + '_upper_channel'] = upper

    T[name + '_lower_energy'] = unitprint.siunitx(energy(lower), energy_err(lower))
    T[name + '_upper_energy'] = unitprint.siunitx(energy(upper), energy_err(upper))

    if show:
        fig = pl.figure()
        ax = fig.add_subplot(1, 1, 1)

        x, y = data[:, 0], data[:, 1]
        ax.plot(x, y, marker=None, color='#377eb8')

        ax.margins(0.05)
        ax.grid(True)
        ax.set_xlabel('Kanal')
        ax.set_ylabel('Ereignisse / s')
        ax.legend(loc='best')
        fig.tight_layout()
        fig.show()
        print('Waiting for input ...')
        input()
        fig.clear()
        pl.close()

    lower -= 300
    upper += 300

    fig = pl.figure(figsize=(4,3))
    ax = fig.add_subplot(1, 1, 1)

    x, y = data[lower:upper, 0], data[lower:upper, 1]
    ax.plot(x, y, marker=None, color='#377eb8')

    ax.margins(0.05)
    ax.grid(True)
    ax.set_xlabel('Kanal')
    ax.set_ylabel('Ereignisse / s')
    fig.tight_layout()
    fig.savefig('_build/plot_spektrum_filter_' + name + '.pdf')
    fig.clear
    pl.close()

def job_analysis(T):

    calibration_li, calibration_err_li = energy_calibration(T, 'li')
    calibration_re, calibration_err_re = energy_calibration(T, 're')

    extract_boundaries(T, 'li_Na', 0.03, calibration_li, calibration_err_li)
    extract_boundaries(T, 're_Na', 0.03, calibration_re, calibration_err_re)

    extract_boundaries(T, 'li_Ba', 0.3, calibration_li, calibration_err_li)
    extract_boundaries(T, 're_Ba', 0.3, calibration_re, calibration_err_re)












def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)

def main():
    T = {}

    ###########################################

    job_analysis(T)

    ###########################################


    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
