#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json
import os.path
import sys
import pprint

import matplotlib.pyplot as pl
import matplotlib.colors
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import scipy.integrate
import scipy.interpolate
import unitprint


def bins(array):
    return max(array) - min(array) + 1


def filter_hits(events, tot_min):
    new_events = []
    for event in events:
        new_event = list(zip(*[(wire, time, tot) for wire, time, tot in zip(*event) if tot >= tot_min]))

        if len(new_event) > 0:
            new_events.append(new_event)

    return new_events


def load_data(filename):
    with open(filename) as f:
        data = json.load(f)

    return data

def num_hits(events):
    return sum([len(event[0]) for event in events])


def wire_le_hist(events, outfile):
    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    wire_le_hist_into_axes(events, ax)

    ax.set_xlabel('Drahtnummer')
    ax.set_ylabel('Anzahl Treffer')
    ax.set_title('{} Treffer'.format(num_hits(events)))

    fig.savefig(outfile)


def wire_le_hist_into_axes(events, ax, **kwargs):
    all_wire_le = []

    for event in events:
        wire_le = event[0]

        for x in wire_le:
            all_wire_le.append(x)

    bins = max(all_wire_le) - min(all_wire_le) + 1
    ax.hist(all_wire_le, bins=bins, **kwargs)


def time_le_hist_into_axes(events, ax, **kwargs):
    all_time_le = []

    for event in events:
        time_le = event[1]

        for x in time_le:
            all_time_le.append(x)

    y, x = np.histogram(all_time_le, bins=bins(all_time_le))
    new_x = (x[1:] + x[:-1])/2
    ax.plot(new_x * 2.5, y, **kwargs)


def time_le_hist_cdf(events, outfile):
    all_time_le = []
    for event in events:
        time_le = event[1]
        all_time_le += time_le

    all_time_le = np.array(all_time_le) * 2.5


    y, x = np.histogram(all_time_le, bins=bins(all_time_le))
    #x = (x[1:] + x[:-1])/2
    x = x[:-1]

    y_integrated = scipy.integrate.cumtrapz(y, x, initial=0)

    y_integrated *= 8.5 / np.max(y_integrated)

    interpolated = scipy.interpolate.interp1d(x, y_integrated, kind='linear', bounds_error=False, fill_value=8.5)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(x, y_integrated)
    ax.set_xlabel('Driftzeit / ns')
    ax.set_ylabel('Distanz / mm')
    ax.grid(True)
    ax.margins(0.05)

    fig.tight_layout()
    fig.savefig(outfile)

    return interpolated


def time_le_histograms(events_lists, labels, outfile):
    fig = pl.figure()

    ax = fig.add_subplot(1, 1, 1)
    for events, label in zip(events_lists, labels):
        kwargs = {}
        if label is not None:
            kwargs['label'] = label
        time_le_hist_into_axes(events, ax, **kwargs)

    ax.set_xlabel('Driftzeit / ns')
    ax.set_ylabel('Anzahl Treffer')
    ax.grid(True)
    ax.margins(0.05)
    if any([label is not None for label in labels]):
        ax.legend(loc='best')
    else:
        ax.set_title('{} Treffer'.format(num_hits(events)))


    fig.tight_layout()
    fig.savefig(outfile)


def time_le_vs_wire_le(events, outfile):
    pl.clf()
    x = []
    y = []

    for event in events:
        wire_le = event[0]
        time_le = event[1]

        x += wire_le
        y += time_le

    #ax.plot(x, np.array(y) * 2.5, linestyle='none', marker='.', alpha=0.3)
    pl.hist2d(x, np.array(y) * 2.5, bins=(bins(x), bins(y)/2), norm=matplotlib.colors.LogNorm())

    pl.colorbar()
    pl.xlabel('Drahtnummer')
    pl.ylabel('Driftzeit / ns')
    pl.grid(True)
    pl.margins(0.05)
    pl.title('{} Treffer'.format(num_hits(events)))

    pl.tight_layout()
    pl.savefig(outfile)

    pl.clf()

def tot_vs_time_le(events, outfile):
    pl.clf()
    x = []
    y = []

    for event in events:
        tot = event[2]
        time_le = event[1]

        x += time_le
        y += tot

    #ax.plot(x, np.array(y) * 2.5, linestyle='none', marker='.', alpha=0.3)
    pl.hist2d(np.array(x) * 2.5, np.array(y), bins=(bins(x), bins(y)/2), norm=matplotlib.colors.LogNorm())

    pl.colorbar()
    pl.xlabel('Driftzeit / ns')
    pl.ylabel('Time over Threshold / 2.5 ns')
    pl.grid(True)
    pl.margins(0.05)
    pl.title('{} Treffer'.format(num_hits(events)))

    pl.tight_layout()
    pl.savefig(outfile)

    pl.clf()

def wire_correlation(events, outfile):
    pl.clf()
    x = []
    y = []

    for event in events:
        wire_le = event[0]

        if len(wire_le) < 2:
            continue

        for w1 in wire_le:
            for w2 in wire_le:
                if w1 == w2:
                    continue


                x.append(w1)
                y.append(w2)

    #ax.plot(x, np.array(y) * 2.5, linestyle='none', marker='.', alpha=0.3)
    counts, xedges, yedges, image = pl.hist2d(np.array(x), np.array(y), bins=(bins(x), bins(y)), norm=matplotlib.colors.LogNorm())


    pl.colorbar()
    pl.xlabel('Kabelnummer')
    pl.ylabel('Kabelnummer')
    pl.grid(True)
    pl.margins(0.05)
    pl.title('{} Treffer'.format(num_hits(events)))

    pl.tight_layout()
    pl.savefig(outfile)

    pl.clf()

    shape = counts.shape

    all_neighbors = {}

    for wire in range(shape[0]):
        neighbors = []
        for wanted in range(4):
            max = 0
            argmax = None
            for neighbor in range(shape[1]):
                if counts[wire, neighbor] > max and neighbor not in neighbors:
                    max = counts[wire, neighbor]
                    argmax = neighbor
            neighbors.append(argmax)

        all_neighbors[wire + 1] = [x+1 for x in neighbors]

    with open(outfile+'-neighbors.dot', 'w') as f:
        f.write('digraph {')
        f.write('''
                ranksep=1.0
                overlap=false
                //nodesep=0.5
                splines=true
                //rankdir=LR
                '''                )
        for wire, neighbors in all_neighbors.items():
            f.write('{} -> {};'.format(wire, ', '.join(map(str, neighbors))))
        f.write('}')


def odb_wrapper(odb):
    max_x = odb.x[-1]
    def new_odb(x):
        if (x > max_x).any():
            print('Interpolation cropped from {} to {}.'.format(x, max_x))
            return odb(max_x)
        else:
            return odb(x)
    return new_odb


def distanz_histogram(events, odb, outfile, lineare_bins=True):
    all_time_le = []
    for event in events:
        time_le = event[1]
        all_time_le += time_le

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    distances = odb(np.array(all_time_le) * 2.5)
    num_bins = bins(all_time_le)
    bin_range = np.arange(num_bins)
    transformed_bins = odb(bin_range * 2.5)
    #print(distances)
    #print(num_bins)

    # Für lineare Bins `num_bins` bei `bins=` nutzen, für transformierte Bins
    # `transformed_bins` nutzen.
    if lineare_bins:
        benutze_bins = num_bins
    else:
        benutze_bins = transformed_bins

    ax.hist(distances, bins=benutze_bins)

    ax.set_xlabel('Distanz / mm')
    ax.set_ylabel('Anzahl Treffer')
    ax.grid(True)
    ax.margins(0.05)
    ax.set_title('{} Treffer'.format(num_hits(events)))

    fig.tight_layout()
    fig.savefig(outfile)


def driftzeit_nachbarn_2d(events, outfile):
    pl.clf()

    x = []
    y = []

    all_time_le = []

    for event in events:
        wire_le = event[0]
        time_le = event[1]
        all_time_le += time_le

        if len(time_le) < 2:
            continue

        for i in range(len(time_le)):
            for j in range(len(time_le)):
                if i == j:
                    continue

                #if not 20 < wire_le[i] < 40:
                #    continue
                #if not 20 < wire_le[j] < 40:
                #    continue

                if abs(wire_le[i] - wire_le[j]) > 1:
                    pass

                t1 = time_le[i]
                t2 = time_le[j]

                x.append(t1)
                y.append(t2)

    # --- Histogramme ---

    # 2D Histogram mit Summe gegen Differenz, lineare Bins.
    pl.hist2d(np.array(x) * 2.5, np.array(y) * 2.5, bins=(bins(x), bins(y)))#, norm=matplotlib.colors.LogNorm())

    # 2D Scatter Plot mit Transparenz.
    #pl.plot(np.array(d), np.array(s), alpha=0.1, marker='.', linestyle='none')

    # --- Ende Histogramme ---

    pl.colorbar()
    pl.xlabel('Driftzeit / ns')
    pl.ylabel('Driftzeit / ns')
    pl.grid(True)
    pl.margins(0.05)

    pl.tight_layout()
    pl.savefig(outfile)

    pl.clf()


def summe_differenz(events, odb, wire_1, wire_2, outfile):
    #wire_1 < wire_2 wird vorausgesetzt, keine Überprüfung

    pl.clf()
    x = []
    y = []
    s = []
    d = []

    hits = 0

    all_time_le = []

    #odb = odb_wrapper(odb)

    for event in events:
        wire_le = event[0]
        time_le = event[1]
        all_time_le += time_le

        if len(time_le) < 2:
            continue


        for i in range(len(time_le)):
            for j in range(len(time_le)):
                if i == j:
                    continue

                if not (wire_le[i] >= wire_1 and  wire_le[j] >= wire_1):
                    continue

                if not (wire_le[i] <= wire_2 and  wire_le[j] <= wire_2):
                    continue


                #if not (wire_le[i] % 2 == 1 and wire_le[j] != wire_le[i] + 1):
                #    pass

                if wire_le[i] < wire_le[j]:
                    t1 = time_le[i]
                    t2 = time_le[j]
                if wire_le[j] < wire_le[i]:
                    t1 = time_le[j]
                    t2 = time_le[i]

                #if t1 == 0 or t2 == 0:
                #    continue

                try:
                    d1 = odb(t1 * 2.5)
                    d2 = odb(t2 * 2.5)
                except ValueError as e:
                    print('Error:', e)
                    print('t1 * 2.5:', t1 * 2.5)
                    print('t2 * 2.5:', t2 * 2.5)
                    raise

                #if d1 + d2 < 9:
                #    pass

                x.append(d1)
                y.append(d2)

                s.append(d1 + d2)
                d.append(d1 - d2)

                hits += 1

    stretch = 1

    num_bins = bins(all_time_le)
    bin_range = np.arange(num_bins/stretch)
    transformed_bins = odb(bin_range * stretch * 2.5)

    new_bins = []
    for bin in transformed_bins:
        if len(new_bins) == 0:
            new_bins.append(bin)
        elif bin > new_bins[-1]:
            new_bins.append(bin)

    #new_bins = 50

    # --- Histogramme ---

    # 2D Histogram mit Abstand gegen Abstand, transformierte Bins.
    #pl.hist2d(np.array(x), np.array(y), bins=(new_bins, new_bins))#, norm=matplotlib.colors.LogNorm())

    # 2D Histogram mit Summe gegen Differenz, lineare Bins.
    pl.hist2d(np.array(d), np.array(s), bins=(50, 50), range=[[-8.5, 8.5], [0, 17]])#, norm=matplotlib.colors.LogNorm())

    # 2D Scatter Plot mit Transparenz.
    #pl.plot(np.array(d), np.array(s), alpha=0.1, marker='.', linestyle='none')

    # --- Ende Histogramme ---

    pl.colorbar()
    pl.xlabel('Differenz / mm')
    pl.ylabel('Summe / mm')
    pl.grid(True)
    pl.margins(0.05)
    pl.title('{} Treffer'.format(hits))

    pl.tight_layout()
    pl.savefig(outfile)

    pl.clf()



def winkelverteilung(events, outfile):
    all_wire_le = []
    for event in events:
        wire_le = event[0]
        all_wire_le += wire_le
    hits, kanten = np.histogram(all_wire_le, bins=bins(all_wire_le))
    kanten = kanten[:-1]
    i_max = np.argmax(hits)
    mitte_draht = kanten[i_max]
    rel_draht = kanten - mitte_draht
    draht_abstand = rel_draht * 8.5
    winkel = np.degrees(np.arctan2(draht_abstand, 123.5))

    popt, pconv = op.curve_fit(fitfunktion, winkel, hits, sigma=np.sqrt(hits), p0=[10000, 0.018, 0, 0])
    fit_x = np.linspace(np.min(winkel), np.max(winkel), 1000)
    fit_y = fitfunktion(fit_x, *popt)

    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.errorbar(winkel, hits, yerr=np.sqrt(hits), linestyle='none', marker='+', label='Daten')
    ax.plot(fit_x, fit_y, label="Modell")
    ax.set_xlabel("Winkel [Grad]")
    ax.set_ylabel("Anzahl Ereignisse")
    ax.margins(0.05)
    ax.grid(True)
    ax.legend(loc="best")
    fig.tight_layout()
    fig.savefig(outfile)

def fitfunktion(x, a, b ,c ,d):
    return a * np.cos(b*x + c)**2 + d


def spannung_vs_strom(datei, outfile):
    pl.clf()

    data = np.loadtxt(datei)
    x = data[:, 0]
    y = data[:, 1]
    yerr = data[:, 2]
    z = data[:, 3]
    zerr = data[:, 4]

    pl.figure()
    pl.errorbar(x, z, yerr=zerr, label='Probe', fmt='x')
    pl.errorbar(x, y, yerr=yerr, label='Hintergrund', fmt='x')

    pl.xlabel('Anodenspannung / kV')
    pl.ylabel('Kammerstrom / nA')
    pl.grid(True)
    pl.legend(loc='best')
    pl.margins(0.05)

    pl.yscale('log')
    pl.tight_layout()
    pl.savefig(outfile)


def spannung_vs_strom_verh(datei, outfile):
    pl.clf()

    data = np.loadtxt(datei)
    x = data[:, 0]
    y = data[:, 3] / data[:, 1]
    yerr = np.sqrt((data[:, 4] / data[:, 1])**2 + (data[:, 3] / (data[:, 1])**2 * data[:, 2])**2)

    pl.figure()
    pl.errorbar(x, y, yerr=yerr)

    pl.xlabel('Anodenspannung / kV')
    pl.ylabel('Verhältnis Probe / Hintergrund')
    pl.grid(True)
    pl.margins(0.05)

    pl.yscale('log')
    pl.tight_layout()
    pl.savefig(outfile)


def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)


def main():
    T = {}

    ###########################################


    pp = pprint.PrettyPrinter()


    ###########################################
    # Messung 1                               #
    ###########################################

    m01_filenames = ['Daten/m01.01_151026.dat',
                    'Daten/m01.02_151027.dat']

    spannung_vs_strom(m01_filenames[0], '_build/m01_01_151026.pdf')
    spannung_vs_strom_verh(m01_filenames[0], '_build/m01_01_151026_2.pdf')

    spannung_vs_strom(m01_filenames[1], '_build/m01_02_151027.pdf')
    spannung_vs_strom_verh(m01_filenames[1], '_build/m01_02_151027_2.pdf')


    ###########################################
    # Messung 3                               #
    ###########################################

    tot_daten = load_data(
            'Daten/m03.01_run_151027_134606.root.js') + load_data(
                    'Daten/m03.01_run_151028_002251.root.js')
    #tot_daten = load_data('Daten/m03.01_run_151027_134606.root.js')

    filtered = filter_hits(tot_daten, 60)

    time_le_histograms([tot_daten], 
                       [None],
                       '_build/m03_01_time_le_hist.pdf')

    time_le_histograms([filtered], 
                       [None],
                       '_build/m03_01_time_le_hist_filtered.pdf')

    tot_vs_time_le(tot_daten, 
                '_build/m03_01_tot_vs_time.pdf')
    tot_vs_time_le(filtered,
                '_build/m03_01_tot_vs_time_filtered.pdf')
    
    wire_correlation(tot_daten,
                '_build/m03_01_wire_correlation.pdf')

    wire_correlation(filtered,
                '_build/m03_01_wire_correlation_filtered.pdf')

    odb = time_le_hist_cdf(filtered,
                '_build/m03_01_odb_filtered.pdf')


    summe_differenz(filtered, odb, 29, 30,
                '_build/m03_01_summe_29_30_filtered.pdf')

    summe_differenz(filtered, odb, 30, 31,
                '_build/m03_01_summe_30_31_filtered.pdf')

    summe_differenz(filtered, odb, 29, 31,
                '_build/m03_01_summe_29_31_filtered.pdf')



    summe_differenz(filtered, odb, 33, 34,
                '_build/m03_01_summe_33_34_filtered.pdf')

    summe_differenz(filtered, odb, 34, 35,
                '_build/m03_01_summe_34_35_filtered.pdf')


    summe_differenz(filtered, odb, 20, 40,
                '_build/m03_01_summe_20_40_filtered.pdf')



    distanz_histogram(filtered, odb,
                '_build/m03_01_distanz_hist-transformed.pdf', False)

    distanz_histogram(filtered, odb, 
                '_build/m03_01_distanz_hist-linear.pdf', True)

    driftzeit_nachbarn_2d(filtered,
                '_build/m03_01_driftzeit_nachbarn_2d.pdf')

    winkelverteilung(tot_daten,
                '_build/m03_01_hits-winkel.pdf')

    winkelverteilung(filtered,
                '_build/m03_01_hits-winkel_filtered.pdf')

    wire_le_hist(tot_daten,
                '_build/m03_01_wire_le_hist.pdf')

    wire_le_hist(filtered,
                '_build/m03_01_wire_le_hist_filtered.pdf')

    time_le_vs_wire_le(tot_daten,
                '_build/m03_01_time_vs_wire.pdf')

    time_le_vs_wire_le(filtered,
                '_build/m03_01_time_vs_wire_filtered.pdf')

    ###########################################
    # Messung 2                               #
    ###########################################


    m2_1_filenames = [
        'm02.01_run_151027_132423.root.js',
        'm02.01_run_151027_133429.root.js',
        'm02.01_run_151027_132711.root.js',
        'm02.01_run_151027_132851.root.js',
    ]

    m2_1_events = [load_data(os.path.join('Daten', x)) for x in m2_1_filenames]

    m2_1_labels = [
        '2.860 kV',
        '2.900 kV',
        '2.950 kV',
        '3.021 kV',
    ]

    time_le_histograms(m2_1_events, m2_1_labels, 
                        '_build/m02_01_time_le_hist.pdf')

    time_le_vs_wire_le(m2_1_events[0], '_build/m02_01_run_2860V_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_1_events[1], '_build/m02_01_run_2900V_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_1_events[2], '_build/m02_01_run_2950V_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_1_events[3], '_build/m02_01_run_3021V_time_vs_wire.pdf')

    wire_le_hist(m2_1_events[0], '_build/m02_01_run_2860V_wire_le_hist.pdf')
    wire_le_hist(m2_1_events[1], '_build/m02_01_run_2900V_wire_le_hist.pdf')
    wire_le_hist(m2_1_events[2], '_build/m02_01_run_2950V_wire_le_hist.pdf')
    wire_le_hist(m2_1_events[3], '_build/m02_01_run_3021V_wire_le_hist.pdf')

    tot_vs_time_le(m2_1_events[0], '_build/m02_01_run_2860V_tot_vs_time.pdf')
    tot_vs_time_le(m2_1_events[1], '_build/m02_01_run_2900V_tot_vs_time.pdf')
    tot_vs_time_le(m2_1_events[2], '_build/m02_01_run_2950V_tot_vs_time.pdf')
    tot_vs_time_le(m2_1_events[3], '_build/m02_01_run_3021V_tot_vs_time.pdf')

    m2_filtered = filter_hits(m2_1_events[0], 5)
    m2_odb = time_le_hist_cdf(m2_filtered, '_build/m02_01_odb_filtered.pdf')
    summe_differenz(m2_filtered, m2_odb, 33, 34,
            '_build/m02_01_summe_33_34_filtered.pdf')


    ###########################################


    m2_2_filenames = [
        'm02.02_run_151027_123323.root.js',
        'm02.02_run_151027_125709.root.js',
        'm02.02_run_151027_125014.root.js',
        'm02.02_run_151027_125349.root.js',
    ]

    m2_2_events = [load_data(os.path.join('Daten', x)) for x in m2_2_filenames]

    m2_2_labels = [
        '0x0020',
        '0x0024',
        '0x0028',
        '0x0038',
    ]

    time_le_histograms(m2_2_events, m2_2_labels, 
            '_build/m02_02_time_le_hist.pdf')

    wire_le_hist(m2_2_events[0], '_build/m02_02_run_0x0020_wire_le_hist.pdf')
    wire_le_hist(m2_2_events[1], '_build/m02_02_run_0x0024_wire_le_hist.pdf')
    wire_le_hist(m2_2_events[2], '_build/m02_02_run_0x0028_wire_le_hist.pdf')
    wire_le_hist(m2_2_events[3], '_build/m02_02_run_0x0038_wire_le_hist.pdf')
    
    time_le_vs_wire_le(m2_2_events[0], '_build/m02_02_run_0x0020_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_2_events[1], '_build/m02_02_run_0x0024_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_2_events[2], '_build/m02_02_run_0x0028_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_2_events[3], '_build/m02_02_run_0x0038_time_vs_wire.pdf')

    tot_vs_time_le(m2_2_events[0], '_build/m02_02_run_0x0020_tot_vs_time.pdf')
    tot_vs_time_le(m2_2_events[1], '_build/m02_02_run_0x0024_tot_vs_time.pdf')
    tot_vs_time_le(m2_2_events[2], '_build/m02_02_run_0x0028_tot_vs_time.pdf')
    tot_vs_time_le(m2_2_events[3], '_build/m02_02_run_0x0038_tot_vs_time.pdf')

    ###########################################


    m2_3_filenames = [
        'm02.03_run_151027_131731.root.js',
        'm02.03_run_151027_130858.root.js',
        'm02.03_run_151027_132034.root.js',
    ]

    m2_3_events = [load_data(os.path.join('Daten', x)) for x in m2_3_filenames]

    m2_3_labels = [
        '0x0020',
        '0x002D',
        '0x0040',
    ]

    time_le_histograms(m2_3_events, m2_3_labels, 
            '_build/m02_03_time_le_hist.pdf')

    wire_le_hist(m2_3_events[0], '_build/m02_03_run_0x0020_wire_le_hist.pdf')
    wire_le_hist(m2_3_events[1], '_build/m02_03_run_0x002D_wire_le_hist.pdf')
    wire_le_hist(m2_3_events[2], '_build/m02_03_run_0x0040_wire_le_hist.pdf')
    
    time_le_vs_wire_le(m2_3_events[0], '_build/m02_03_run_0x0020_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_3_events[1], '_build/m02_03_run_0x002D_time_vs_wire.pdf')
    time_le_vs_wire_le(m2_3_events[2], '_build/m02_03_run_0x0040_time_vs_wire.pdf')

    tot_vs_time_le(m2_3_events[0], '_build/m02_03_run_0x0020_tot_vs_time.pdf')
    tot_vs_time_le(m2_3_events[1], '_build/m02_03_run_0x002D_tot_vs_time.pdf')
    tot_vs_time_le(m2_3_events[2], '_build/m02_03_run_0x0040_tot_vs_time.pdf')

    #m2_filtered = filter_hits(m2_3_events[0], 5)
    #m2_odb = time_le_hist_cdf(m2_filtered, '_build/m02_01_odb_filtered.pdf')
    #summe_differenz(m2_filtered, m2_odb, '_build/m02_01_summe_filtered.pdf')



    ###########################################

    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)


if __name__ == "__main__":
    main()
