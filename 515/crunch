#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2015 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json
import os.path
import sys

import matplotlib.pyplot as pl
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import unitprint


def bins(array):
    return max(array) - min(array) + 1


def load_data(filename):
    with open(filename) as f:
        data = json.load(f)

    return data


def wire_le_hist(events, outfile, title):
    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    wire_le_hist_into_axes(events, ax)

    ax.set_xlabel('Drahtnummer')
    ax.set_ylabel('Anzahl Events')
    ax.set_title(title)

    fig.savefig(outfile)


def wire_le_hist_into_axes(events, ax):
    all_wire_le = []

    for event in events:
        wire_le = event[0]

        for x in wire_le:
            all_wire_le.append(x)

    bins = max(all_wire_le) - min(all_wire_le) + 1
    ax.hist(all_wire_le, bins=bins)


def time_le_hist_into_axes(events, ax, label):
    all_time_le = []

    for event in events:
        time_le = event[1]

        for x in time_le:
            all_time_le.append(x)

    dummy = pl.figure()
    dummy_ax = dummy.add_subplot(1, 1, 1)

    bins = max(all_time_le) - min(all_time_le) + 1

    y, x, patches = dummy_ax.hist(all_time_le, bins=bins)
    new_x = (x[1:] + x[:-1])/2
    ax.plot(new_x * 2.5, y, label=label)


def time_le_histograms(events_lists, labels, title, outfile):
    fig = pl.figure()

    ax = fig.add_subplot(1, 1, 1)
    for events, label in zip(events_lists, labels):
        time_le_hist_into_axes(events, ax, label)

    ax.set_xlabel('Driftzeit / ns')
    ax.set_ylabel('Anzahl Events')
    ax.set_title(title)
    ax.grid(True)
    ax.margins(0.05)
    ax.legend(loc='best')

    fig.tight_layout()
    fig.savefig(outfile)


def time_le_vs_wire_le(events, outfile, title):
    fig = pl.figure()
    ax = fig.add_subplot(1, 1, 1)

    x = []
    y = []

    for event in events:
        wire_le = event[0]
        time_le = event[1]

        x += wire_le
        y += time_le

    #ax.plot(x, np.array(y) * 2.5, linestyle='none', marker='.', alpha=0.3)
    ax.hist2d(x, np.array(y) * 2.5, bins=(bins(x), bins(y)))

    #ax.colorbar()

    ax.set_xlabel('Drahtnummer')
    ax.set_ylabel('Driftzeit / ns')
    ax.set_title(title)
    ax.grid(True)
    ax.margins(0.05)

    fig.tight_layout()
    fig.savefig(outfile)


def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)


def main():
    T = {}

    ###########################################

    m2_1_filenames = [
        'm02.01_run_151027_132423.root.js',
        'm02.01_run_151027_133429.root.js',
        'm02.01_run_151027_132711.root.js',
        'm02.01_run_151027_132851.root.js',
    ]

    m2_1_events = [load_data(os.path.join('Daten', x)) for x in m2_1_filenames]

    m2_1_labels = [
        '2.860 kV',
        '2.900 kV',
        '2.950 kV',
        '3.021 kV',
    ]

    time_le_vs_wire_le(m2_1_events[0], 'time_vs_wire.pdf', 'Titel')

    time_le_histograms(m2_1_events, m2_1_labels, 'Hochspannung', 'm2_1_time_le_hist.pdf')

    wire_le_hist(m2_1_events[0], 'm02.01_run_151027_132423_wire_le_hist.pdf', 'm02.01')

    ###########################################

    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)


if __name__ == "__main__":
    main()
